import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from "react";
import styled, { css } from "styled-components";

/**
 * @title ButtonGroup component
 *
 * @summary Components/ButtonGroup groups Buttons together into a bar
 * @see StyledComponents
 * @see Button (components/button)
 *
 * @version 1.0.2
 * @author [SurveillanceOne][Markus Hudobnik](https://github.com/SurveillanceOne)
 */
var ButtonGroupStyled = styled.div.withConfig({
  displayName: "ButtonGroup__ButtonGroupStyled",
  componentId: "sc-1jjzcjw-0"
})(["display:flex;button{width:100%;overflow:visible;margin:", ";", "}"], function (p) {
  return p.inline ? "5px 0" : "5px";
}, function (p) {
  return p.inline && css(["&:not(:first-child):not(:last-child){border-radius:0;margin-right:1px;}&:first-child{border-radius:.3rem 0 0 .3rem;margin-right:1px;}&:last-child{border-radius:0 .3rem .3rem 0;}"]);
});
/**
 * @class ButtonGroup
 * @param {any} { children, ...props }
 *
 * @description groups buttons together
 */

var ButtonGroup = function ButtonGroup(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return React.createElement(ButtonGroupStyled, props, React.Children.map(children, function (child, i) {
    return React.cloneElement(child, props);
  }));
};

ButtonGroup.defaultProps = {
  children: [],
  secondary: false,
  primary: false,
  inline: false
};
export default ButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYnV0dG9uL0J1dHRvbkdyb3VwLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInN0eWxlZCIsImNzcyIsIkJ1dHRvbkdyb3VwU3R5bGVkIiwiZGl2IiwicCIsImlubGluZSIsIkJ1dHRvbkdyb3VwIiwiY2hpbGRyZW4iLCJwcm9wcyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpIiwiY2xvbmVFbGVtZW50IiwiZGVmYXVsdFByb3BzIiwic2Vjb25kYXJ5IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxNQUFQLElBQWlCQyxHQUFqQixRQUE0QixtQkFBNUI7O0FBR0E7Ozs7Ozs7Ozs7QUFXQSxJQUFNQyxpQkFBaUIsR0FBR0YsTUFBTSxDQUFDRyxHQUFWO0FBQUE7QUFBQTtBQUFBLDBFQVFULFVBQUFDLENBQUM7QUFBQSxTQUFLQSxDQUFDLENBQUNDLE1BQUYsR0FBVyxPQUFYLEdBQXFCLEtBQTFCO0FBQUEsQ0FSUSxFQVNqQixVQUFBRCxDQUFDO0FBQUEsU0FBSUEsQ0FBQyxDQUFDQyxNQUFGLElBQVlKLEdBQVosdUxBQUo7QUFBQSxDQVRnQixDQUF2QjtBQXlCQTs7Ozs7OztBQU1BLElBQU1LLFdBQVcsR0FBRyxTQUFkQSxXQUFjO0FBQUEsTUFBR0MsUUFBSCxRQUFHQSxRQUFIO0FBQUEsTUFBZ0JDLEtBQWhCOztBQUFBLFNBQ25CLG9CQUFDLGlCQUFELEVBQXVCQSxLQUF2QixFQUNFVCxLQUFLLENBQUNVLFFBQU4sQ0FBZUMsR0FBZixDQUFtQkgsUUFBbkIsRUFBNkIsVUFBQ0ksS0FBRCxFQUFRQyxDQUFSO0FBQUEsV0FBY2IsS0FBSyxDQUFDYyxZQUFOLENBQW1CRixLQUFuQixFQUEwQkgsS0FBMUIsQ0FBZDtBQUFBLEdBQTdCLENBREYsQ0FEbUI7QUFBQSxDQUFwQjs7QUFNQUYsV0FBVyxDQUFDUSxZQUFaLEdBQTJCO0FBQzFCUCxFQUFBQSxRQUFRLEVBQUUsRUFEZ0I7QUFFMUJRLEVBQUFBLFNBQVMsRUFBRSxLQUZlO0FBRzFCQyxFQUFBQSxPQUFPLEVBQUUsS0FIaUI7QUFJMUJYLEVBQUFBLE1BQU0sRUFBRTtBQUprQixDQUEzQjtBQWdCQSxlQUFlQyxXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBAdGl0bGUgQnV0dG9uR3JvdXAgY29tcG9uZW50XG4gKlxuICogQHN1bW1hcnkgQ29tcG9uZW50cy9CdXR0b25Hcm91cCBncm91cHMgQnV0dG9ucyB0b2dldGhlciBpbnRvIGEgYmFyXG4gKiBAc2VlIFN0eWxlZENvbXBvbmVudHNcbiAqIEBzZWUgQnV0dG9uIChjb21wb25lbnRzL2J1dHRvbilcbiAqXG4gKiBAdmVyc2lvbiAxLjAuMlxuICogQGF1dGhvciBbU3VydmVpbGxhbmNlT25lXVtNYXJrdXMgSHVkb2JuaWtdKGh0dHBzOi8vZ2l0aHViLmNvbS9TdXJ2ZWlsbGFuY2VPbmUpXG4gKi9cblxuY29uc3QgQnV0dG9uR3JvdXBTdHlsZWQgPSBzdHlsZWQuZGl2YFxuICAvKiogU3R5bGVzIHRoZSBDb250YWluZXIgKi9cbiAgZGlzcGxheTogZmxleDtcbiAgXG4gIC8qKiBTdHlsZXMgdGhlIGJ1dHRvbnMgKi9cbiAgYnV0dG9uIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICBtYXJnaW46ICR7cCA9PiAocC5pbmxpbmUgPyBcIjVweCAwXCIgOiBcIjVweFwiKX07XG4gICAgJHtwID0+IHAuaW5saW5lICYmIGNzc2BcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgIG1hcmdpbi1yaWdodDogMXB4O1xuICAgIH1cbiAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IC4zcmVtIDAgMCAuM3JlbTtcbiAgICAgIG1hcmdpbi1yaWdodDogMXB4O1xuICAgIH1cbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgYm9yZGVyLXJhZGl1czogMCAuM3JlbSAuM3JlbSAwO1xuICAgIH1cbiAgYH1cbiAgfVxuYDtcblxuLyoqXG4gKiBAY2xhc3MgQnV0dG9uR3JvdXBcbiAqIEBwYXJhbSB7YW55fSB7IGNoaWxkcmVuLCAuLi5wcm9wcyB9XG4gKlxuICogQGRlc2NyaXB0aW9uIGdyb3VwcyBidXR0b25zIHRvZ2V0aGVyXG4gKi9cbmNvbnN0IEJ1dHRvbkdyb3VwID0gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcblx0PEJ1dHRvbkdyb3VwU3R5bGVkIHsuLi5wcm9wc30+XG5cdFx0e1JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpKSA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHByb3BzKSl9XG5cdDwvQnV0dG9uR3JvdXBTdHlsZWQ+XG4pO1xuXG5CdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSB7XG5cdGNoaWxkcmVuOiBbXSxcblx0c2Vjb25kYXJ5OiBmYWxzZSxcblx0cHJpbWFyeTogZmFsc2UsXG5cdGlubGluZTogZmFsc2UsXG59O1xuQnV0dG9uR3JvdXAucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pLmlzUmVxdWlyZWQsXG5cdHNlY29uZGFyeTogUHJvcFR5cGVzLmJvb2wsXG5cdHByaW1hcnk6IFByb3BUeXBlcy5ib29sLFxuXHRpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXA7XG4iXX0=