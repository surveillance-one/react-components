import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from "react";
import styled, { css } from "styled-components";

/**
 * @title ButtonGroup component
 *
 * @summary Components/ButtonGroup groups Buttons together into a bar
 * @see StyledComponents
 * @see Button (components/button)
 *
 * @version 1.0.1
 * @author [SurveillanceOne][Markus Hudobnik](https://github.com/SurveillanceOne)
 */
var ButtonGroupStyled = styled.div.withConfig({
  displayName: "ButtonGroup__ButtonGroupStyled",
  componentId: "sc-19p0mxe-0"
})(["display:flex;button{margin:", ";", "}"], function (p) {
  return p.inline ? "5px 0" : "5px";
}, function (p) {
  return p.inline && css(["&:not(:first-child):not(:last-child){border-radius:0;margin-right:1px;}&:first-child{border-radius:.3rem 0 0 .3rem;margin-right:1px;}&:last-child{border-radius:0 .3rem .3rem 0;}"]);
});
/**
 * @class ButtonGroup
 * @param {any} { children, ...props }
 *
 * @description groups buttons together
 */

var ButtonGroup = function ButtonGroup(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return React.createElement(ButtonGroupStyled, props, React.Children.map(children, function (child, i) {
    return React.cloneElement(child, props);
  }));
};

ButtonGroup.defaultProps = {
  children: [],
  secondary: false,
  primary: false,
  inline: false
};
export default ButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYnV0dG9uL0J1dHRvbkdyb3VwLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInN0eWxlZCIsImNzcyIsIkJ1dHRvbkdyb3VwU3R5bGVkIiwiZGl2IiwicCIsImlubGluZSIsIkJ1dHRvbkdyb3VwIiwiY2hpbGRyZW4iLCJwcm9wcyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpIiwiY2xvbmVFbGVtZW50IiwiZGVmYXVsdFByb3BzIiwic2Vjb25kYXJ5IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxNQUFQLElBQWlCQyxHQUFqQixRQUE0QixtQkFBNUI7O0FBR0E7Ozs7Ozs7Ozs7QUFXQSxJQUFNQyxpQkFBaUIsR0FBR0YsTUFBTSxDQUFDRyxHQUFWO0FBQUE7QUFBQTtBQUFBLDhDQU1ULFVBQUFDLENBQUM7QUFBQSxTQUFLQSxDQUFDLENBQUNDLE1BQUYsR0FBVyxPQUFYLEdBQXFCLEtBQTFCO0FBQUEsQ0FOUSxFQU9qQixVQUFBRCxDQUFDO0FBQUEsU0FBSUEsQ0FBQyxDQUFDQyxNQUFGLElBQVlKLEdBQVosdUxBQUo7QUFBQSxDQVBnQixDQUF2QjtBQXVCQTs7Ozs7OztBQU1BLElBQU1LLFdBQVcsR0FBRyxTQUFkQSxXQUFjO0FBQUEsTUFBR0MsUUFBSCxRQUFHQSxRQUFIO0FBQUEsTUFBZ0JDLEtBQWhCOztBQUFBLFNBQ25CLG9CQUFDLGlCQUFELEVBQXVCQSxLQUF2QixFQUNFVCxLQUFLLENBQUNVLFFBQU4sQ0FBZUMsR0FBZixDQUFtQkgsUUFBbkIsRUFBNkIsVUFBQ0ksS0FBRCxFQUFRQyxDQUFSO0FBQUEsV0FBY2IsS0FBSyxDQUFDYyxZQUFOLENBQW1CRixLQUFuQixFQUEwQkgsS0FBMUIsQ0FBZDtBQUFBLEdBQTdCLENBREYsQ0FEbUI7QUFBQSxDQUFwQjs7QUFNQUYsV0FBVyxDQUFDUSxZQUFaLEdBQTJCO0FBQzFCUCxFQUFBQSxRQUFRLEVBQUUsRUFEZ0I7QUFFMUJRLEVBQUFBLFNBQVMsRUFBRSxLQUZlO0FBRzFCQyxFQUFBQSxPQUFPLEVBQUUsS0FIaUI7QUFJMUJYLEVBQUFBLE1BQU0sRUFBRTtBQUprQixDQUEzQjtBQWdCQSxlQUFlQyxXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBAdGl0bGUgQnV0dG9uR3JvdXAgY29tcG9uZW50XG4gKlxuICogQHN1bW1hcnkgQ29tcG9uZW50cy9CdXR0b25Hcm91cCBncm91cHMgQnV0dG9ucyB0b2dldGhlciBpbnRvIGEgYmFyXG4gKiBAc2VlIFN0eWxlZENvbXBvbmVudHNcbiAqIEBzZWUgQnV0dG9uIChjb21wb25lbnRzL2J1dHRvbilcbiAqXG4gKiBAdmVyc2lvbiAxLjAuMVxuICogQGF1dGhvciBbU3VydmVpbGxhbmNlT25lXVtNYXJrdXMgSHVkb2JuaWtdKGh0dHBzOi8vZ2l0aHViLmNvbS9TdXJ2ZWlsbGFuY2VPbmUpXG4gKi9cblxuY29uc3QgQnV0dG9uR3JvdXBTdHlsZWQgPSBzdHlsZWQuZGl2YFxuICAvKiogU3R5bGVzIHRoZSBDb250YWluZXIgKi9cbiAgZGlzcGxheTogZmxleDtcblxuICAvKiogU3R5bGVzIHRoZSBidXR0b25zICovXG4gIGJ1dHRvbiB7XG4gICAgbWFyZ2luOiAke3AgPT4gKHAuaW5saW5lID8gXCI1cHggMFwiIDogXCI1cHhcIil9O1xuICAgICR7cCA9PiBwLmlubGluZSAmJiBjc3NgXG4gICAgJjpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFweDtcbiAgICB9XG4gICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAuM3JlbSAwIDAgLjNyZW07XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFweDtcbiAgICB9XG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDAgLjNyZW0gLjNyZW0gMDtcbiAgICB9XG4gIGB9XG4gIH1cbmA7XG5cbi8qKlxuICogQGNsYXNzIEJ1dHRvbkdyb3VwXG4gKiBAcGFyYW0ge2FueX0geyBjaGlsZHJlbiwgLi4ucHJvcHMgfVxuICpcbiAqIEBkZXNjcmlwdGlvbiBncm91cHMgYnV0dG9ucyB0b2dldGhlclxuICovXG5jb25zdCBCdXR0b25Hcm91cCA9ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiAoXG5cdDxCdXR0b25Hcm91cFN0eWxlZCB7Li4ucHJvcHN9PlxuXHRcdHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaSkgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBwcm9wcykpfVxuXHQ8L0J1dHRvbkdyb3VwU3R5bGVkPlxuKTtcblxuQnV0dG9uR3JvdXAuZGVmYXVsdFByb3BzID0ge1xuXHRjaGlsZHJlbjogW10sXG5cdHNlY29uZGFyeTogZmFsc2UsXG5cdHByaW1hcnk6IGZhbHNlLFxuXHRpbmxpbmU6IGZhbHNlLFxufTtcbkJ1dHRvbkdyb3VwLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSxcblx0XHRQcm9wVHlwZXMubm9kZVxuXHRdKS5pc1JlcXVpcmVkLFxuXHRzZWNvbmRhcnk6IFByb3BUeXBlcy5ib29sLFxuXHRwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0aW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkdyb3VwO1xuIl19