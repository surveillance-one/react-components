import React from "react";
import { BtnLabel, IconWrapper, ButtonContainer } from "./styles";
import { Icon } from "../icon";
/**
 * @title Button component
 *
 * @summary Components/Button is a simple button component using Styled Components and made for reusability
 * @see StyledComponents
 *
 * @version 2.0.0
 * @author [SurveillanceOne][Markus Hudobnik](https://github.com/SurveillanceOne)
 */

/**
	* Component Declaration
	* - Default Props
	* - themes
 */

var Button = function Button(_ref) {
  var children = _ref.children,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      iconName = _ref.iconName,
      squared = _ref.squared,
      rounded = _ref.rounded,
      circle = _ref.circle,
      iconPosition = _ref.iconPosition,
      primary = _ref.primary,
      secondary = _ref.secondary;
  return React.createElement(ButtonContainer, {
    onClick: onClick,
    disabled: disabled,
    iconName: iconName,
    primary: primary,
    secondary: secondary,
    rounded: rounded,
    squared: squared,
    circle: circle
  }, !squared && !circle && React.createElement(BtnLabel, null, children), iconName && React.createElement(IconWrapper, {
    iconPosition: iconPosition,
    squared: squared,
    circle: circle,
    rounded: rounded
  }, React.createElement(Icon, {
    icon: iconName
  })));
};
/**
 * PropTypes
 */


export default Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYnV0dG9uL0J1dHRvbi5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJCdG5MYWJlbCIsIkljb25XcmFwcGVyIiwiQnV0dG9uQ29udGFpbmVyIiwiSWNvbiIsIkJ1dHRvbiIsImNoaWxkcmVuIiwib25DbGljayIsImRpc2FibGVkIiwiaWNvbk5hbWUiLCJzcXVhcmVkIiwicm91bmRlZCIsImNpcmNsZSIsImljb25Qb3NpdGlvbiIsInByaW1hcnkiLCJzZWNvbmRhcnkiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFHQSxTQUNDQyxRQURELEVBRUNDLFdBRkQsRUFHQ0MsZUFIRCxRQUlPLFVBSlA7QUFNQSxTQUFTQyxJQUFULFFBQXFCLFNBQXJCO0FBRUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7O0FBS0EsSUFBTUMsTUFBTSxHQUFHLFNBQVRBLE1BQVM7QUFBQSxNQUNkQyxRQURjLFFBQ2RBLFFBRGM7QUFBQSxNQUNKQyxPQURJLFFBQ0pBLE9BREk7QUFBQSxNQUNLQyxRQURMLFFBQ0tBLFFBREw7QUFBQSxNQUNlQyxRQURmLFFBQ2VBLFFBRGY7QUFBQSxNQUN5QkMsT0FEekIsUUFDeUJBLE9BRHpCO0FBQUEsTUFDa0NDLE9BRGxDLFFBQ2tDQSxPQURsQztBQUFBLE1BQzJDQyxNQUQzQyxRQUMyQ0EsTUFEM0M7QUFBQSxNQUNtREMsWUFEbkQsUUFDbURBLFlBRG5EO0FBQUEsTUFDaUVDLE9BRGpFLFFBQ2lFQSxPQURqRTtBQUFBLE1BQzBFQyxTQUQxRSxRQUMwRUEsU0FEMUU7QUFBQSxTQUdkLG9CQUFDLGVBQUQ7QUFDQyxJQUFBLE9BQU8sRUFBRVIsT0FEVjtBQUVDLElBQUEsUUFBUSxFQUFFQyxRQUZYO0FBR0MsSUFBQSxRQUFRLEVBQUVDLFFBSFg7QUFJQyxJQUFBLE9BQU8sRUFBRUssT0FKVjtBQUtDLElBQUEsU0FBUyxFQUFFQyxTQUxaO0FBTUMsSUFBQSxPQUFPLEVBQUVKLE9BTlY7QUFPQyxJQUFBLE9BQU8sRUFBRUQsT0FQVjtBQVFDLElBQUEsTUFBTSxFQUFFRTtBQVJULEtBU0csQ0FBQ0YsT0FBRCxJQUFZLENBQUNFLE1BQWQsSUFDQSxvQkFBQyxRQUFELFFBQ0VOLFFBREYsQ0FWRixFQWVFRyxRQUFRLElBQ1Isb0JBQUMsV0FBRDtBQUNDLElBQUEsWUFBWSxFQUFFSSxZQURmO0FBRUMsSUFBQSxPQUFPLEVBQUVILE9BRlY7QUFHQyxJQUFBLE1BQU0sRUFBRUUsTUFIVDtBQUlDLElBQUEsT0FBTyxFQUFFRDtBQUpWLEtBS0Msb0JBQUMsSUFBRDtBQUFNLElBQUEsSUFBSSxFQUFFRjtBQUFaLElBTEQsQ0FoQkYsQ0FIYztBQUFBLENBQWY7QUE4QkE7Ozs7O0FBZ0JBLGVBQWVKLE1BQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmltcG9ydCB7XG5cdEJ0bkxhYmVsLFxuXHRJY29uV3JhcHBlcixcblx0QnV0dG9uQ29udGFpbmVyXG59IGZyb20gXCIuL3N0eWxlc1wiO1xuXG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIi4uL2ljb25cIjtcblxuLyoqXG4gKiBAdGl0bGUgQnV0dG9uIGNvbXBvbmVudFxuICpcbiAqIEBzdW1tYXJ5IENvbXBvbmVudHMvQnV0dG9uIGlzIGEgc2ltcGxlIGJ1dHRvbiBjb21wb25lbnQgdXNpbmcgU3R5bGVkIENvbXBvbmVudHMgYW5kIG1hZGUgZm9yIHJldXNhYmlsaXR5XG4gKiBAc2VlIFN0eWxlZENvbXBvbmVudHNcbiAqXG4gKiBAdmVyc2lvbiAyLjAuMFxuICogQGF1dGhvciBbU3VydmVpbGxhbmNlT25lXVtNYXJrdXMgSHVkb2JuaWtdKGh0dHBzOi8vZ2l0aHViLmNvbS9TdXJ2ZWlsbGFuY2VPbmUpXG4gKi9cblxuLyoqXG5cdCogQ29tcG9uZW50IERlY2xhcmF0aW9uXG5cdCogLSBEZWZhdWx0IFByb3BzXG5cdCogLSB0aGVtZXNcbiAqL1xuY29uc3QgQnV0dG9uID0gKHtcblx0Y2hpbGRyZW4sIG9uQ2xpY2ssIGRpc2FibGVkLCBpY29uTmFtZSwgc3F1YXJlZCwgcm91bmRlZCwgY2lyY2xlLCBpY29uUG9zaXRpb24sIHByaW1hcnksIHNlY29uZGFyeVxufSkgPT4gKFxuXHQ8QnV0dG9uQ29udGFpbmVyXG5cdFx0b25DbGljaz17b25DbGlja31cblx0XHRkaXNhYmxlZD17ZGlzYWJsZWR9XG5cdFx0aWNvbk5hbWU9e2ljb25OYW1lfVxuXHRcdHByaW1hcnk9e3ByaW1hcnl9XG5cdFx0c2Vjb25kYXJ5PXtzZWNvbmRhcnl9XG5cdFx0cm91bmRlZD17cm91bmRlZH1cblx0XHRzcXVhcmVkPXtzcXVhcmVkfVxuXHRcdGNpcmNsZT17Y2lyY2xlfT5cblx0XHR7KCFzcXVhcmVkICYmICFjaXJjbGUpICYmXG5cdFx0XHQ8QnRuTGFiZWw+XG5cdFx0XHRcdHtjaGlsZHJlbn1cblx0XHRcdDwvQnRuTGFiZWw+XG5cdFx0fVxuXG5cdFx0e2ljb25OYW1lICYmXG5cdFx0XHQ8SWNvbldyYXBwZXJcblx0XHRcdFx0aWNvblBvc2l0aW9uPXtpY29uUG9zaXRpb259XG5cdFx0XHRcdHNxdWFyZWQ9e3NxdWFyZWR9XG5cdFx0XHRcdGNpcmNsZT17Y2lyY2xlfVxuXHRcdFx0XHRyb3VuZGVkPXtyb3VuZGVkfT5cblx0XHRcdFx0PEljb24gaWNvbj17aWNvbk5hbWV9Lz5cblx0XHRcdDwvSWNvbldyYXBwZXI+XG5cdFx0fVxuXHQ8L0J1dHRvbkNvbnRhaW5lcj5cbik7XG5cbi8qKlxuICogUHJvcFR5cGVzXG4gKi9cbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRpY29uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0aWNvblBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoW1wibGVmdFwiLCBcInJpZ2h0XCJdKSxcblx0YW5pbWF0aW9uczogUHJvcFR5cGVzLmJvb2wsXG5cdHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblx0cm91bmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cdHNxdWFyZWQ6IFByb3BUeXBlcy5ib29sLFxuXHRwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0c2Vjb25kYXJ5OiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiJdfQ==