import React from "react";
import { BtnLabel, ButtonContainer } from "./styles";
import { IconWrapper } from "../ui/styles/globals";
import { Icon } from "../icon";
/**
 * @title Button component
 *
 * @summary Components/Button is a simple button component using Styled Components and made for reusability
 * @see StyledComponents
 *
 * @version 2.0.0
 * @author [SurveillanceOne][Markus Hudobnik](https://github.com/SurveillanceOne)
 */

var Button = function Button(_ref) {
  var children = _ref.children,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      iconName = _ref.iconName,
      squared = _ref.squared,
      rounded = _ref.rounded,
      circle = _ref.circle,
      iconPosition = _ref.iconPosition,
      primary = _ref.primary,
      secondary = _ref.secondary,
      _ref$iconBg = _ref.iconBg,
      iconBg = _ref$iconBg === void 0 ? true : _ref$iconBg;
  return React.createElement(ButtonContainer, {
    onClick: onClick,
    disabled: disabled,
    iconName: iconName,
    primary: primary,
    secondary: secondary,
    rounded: rounded,
    squared: squared,
    circle: circle
  }, !squared && !circle && React.createElement(BtnLabel, null, children), iconName && React.createElement(IconWrapper, {
    bg: iconBg,
    iconPosition: iconPosition,
    squared: squared,
    circle: circle,
    rounded: rounded
  }, React.createElement(Icon, {
    icon: iconName
  })));
};

export default Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYnV0dG9uL0J1dHRvbi5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJCdG5MYWJlbCIsIkJ1dHRvbkNvbnRhaW5lciIsIkljb25XcmFwcGVyIiwiSWNvbiIsIkJ1dHRvbiIsImNoaWxkcmVuIiwib25DbGljayIsImRpc2FibGVkIiwiaWNvbk5hbWUiLCJzcXVhcmVkIiwicm91bmRlZCIsImNpcmNsZSIsImljb25Qb3NpdGlvbiIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJpY29uQmciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFFQSxTQUFTQyxRQUFULEVBQW1CQyxlQUFuQixRQUEwQyxVQUExQztBQUNBLFNBQVNDLFdBQVQsUUFBNEIsc0JBQTVCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixTQUFyQjtBQUVBOzs7Ozs7Ozs7O0FBVUEsSUFBTUMsTUFBTSxHQUFHLFNBQVRBLE1BQVM7QUFBQSxNQUNkQyxRQURjLFFBQ2RBLFFBRGM7QUFBQSxNQUVkQyxPQUZjLFFBRWRBLE9BRmM7QUFBQSxNQUdkQyxRQUhjLFFBR2RBLFFBSGM7QUFBQSxNQUlkQyxRQUpjLFFBSWRBLFFBSmM7QUFBQSxNQUtkQyxPQUxjLFFBS2RBLE9BTGM7QUFBQSxNQU1kQyxPQU5jLFFBTWRBLE9BTmM7QUFBQSxNQU9kQyxNQVBjLFFBT2RBLE1BUGM7QUFBQSxNQVFkQyxZQVJjLFFBUWRBLFlBUmM7QUFBQSxNQVNkQyxPQVRjLFFBU2RBLE9BVGM7QUFBQSxNQVVkQyxTQVZjLFFBVWRBLFNBVmM7QUFBQSx5QkFXZEMsTUFYYztBQUFBLE1BV2RBLE1BWGMsNEJBV0wsSUFYSztBQUFBLFNBYWQsb0JBQUMsZUFBRDtBQUNDLElBQUEsT0FBTyxFQUFFVCxPQURWO0FBRUMsSUFBQSxRQUFRLEVBQUVDLFFBRlg7QUFHQyxJQUFBLFFBQVEsRUFBRUMsUUFIWDtBQUlDLElBQUEsT0FBTyxFQUFFSyxPQUpWO0FBS0MsSUFBQSxTQUFTLEVBQUVDLFNBTFo7QUFNQyxJQUFBLE9BQU8sRUFBRUosT0FOVjtBQU9DLElBQUEsT0FBTyxFQUFFRCxPQVBWO0FBUUMsSUFBQSxNQUFNLEVBQUVFO0FBUlQsS0FVRyxDQUFDRixPQUFELElBQVksQ0FBQ0UsTUFBZCxJQUVELG9CQUFDLFFBQUQsUUFDRU4sUUFERixDQVpELEVBaUJFRyxRQUFRLElBRVQsb0JBQUMsV0FBRDtBQUNDLElBQUEsRUFBRSxFQUFFTyxNQURMO0FBRUMsSUFBQSxZQUFZLEVBQUVILFlBRmY7QUFHQyxJQUFBLE9BQU8sRUFBRUgsT0FIVjtBQUlDLElBQUEsTUFBTSxFQUFFRSxNQUpUO0FBS0MsSUFBQSxPQUFPLEVBQUVEO0FBTFYsS0FNQyxvQkFBQyxJQUFEO0FBQU0sSUFBQSxJQUFJLEVBQUVGO0FBQVosSUFORCxDQW5CRCxDQWJjO0FBQUEsQ0FBZjs7QUEwREEsZUFBZUosTUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IEJ0bkxhYmVsLCBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi9zdHlsZXNcIjtcbmltcG9ydCB7IEljb25XcmFwcGVyIH0gZnJvbSBcIi4uL3VpL3N0eWxlcy9nbG9iYWxzXCI7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIi4uL2ljb25cIjtcblxuLyoqXG4gKiBAdGl0bGUgQnV0dG9uIGNvbXBvbmVudFxuICpcbiAqIEBzdW1tYXJ5IENvbXBvbmVudHMvQnV0dG9uIGlzIGEgc2ltcGxlIGJ1dHRvbiBjb21wb25lbnQgdXNpbmcgU3R5bGVkIENvbXBvbmVudHMgYW5kIG1hZGUgZm9yIHJldXNhYmlsaXR5XG4gKiBAc2VlIFN0eWxlZENvbXBvbmVudHNcbiAqXG4gKiBAdmVyc2lvbiAyLjAuMFxuICogQGF1dGhvciBbU3VydmVpbGxhbmNlT25lXVtNYXJrdXMgSHVkb2JuaWtdKGh0dHBzOi8vZ2l0aHViLmNvbS9TdXJ2ZWlsbGFuY2VPbmUpXG4gKi9cblxuY29uc3QgQnV0dG9uID0gKHtcblx0Y2hpbGRyZW4sXG5cdG9uQ2xpY2ssXG5cdGRpc2FibGVkLFxuXHRpY29uTmFtZSxcblx0c3F1YXJlZCxcblx0cm91bmRlZCxcblx0Y2lyY2xlLFxuXHRpY29uUG9zaXRpb24sXG5cdHByaW1hcnksXG5cdHNlY29uZGFyeSxcblx0aWNvbkJnID0gdHJ1ZVxufSkgPT4gKFxuXHQ8QnV0dG9uQ29udGFpbmVyXG5cdFx0b25DbGljaz17b25DbGlja31cblx0XHRkaXNhYmxlZD17ZGlzYWJsZWR9XG5cdFx0aWNvbk5hbWU9e2ljb25OYW1lfVxuXHRcdHByaW1hcnk9e3ByaW1hcnl9XG5cdFx0c2Vjb25kYXJ5PXtzZWNvbmRhcnl9XG5cdFx0cm91bmRlZD17cm91bmRlZH1cblx0XHRzcXVhcmVkPXtzcXVhcmVkfVxuXHRcdGNpcmNsZT17Y2lyY2xlfT5cblxuXHRcdHsoIXNxdWFyZWQgJiYgIWNpcmNsZSlcblx0XHQmJlxuXHRcdDxCdG5MYWJlbD5cblx0XHRcdHtjaGlsZHJlbn1cblx0XHQ8L0J0bkxhYmVsPlxuXHRcdH1cblxuXHRcdHtpY29uTmFtZVxuXHRcdCYmXG5cdFx0PEljb25XcmFwcGVyXG5cdFx0XHRiZz17aWNvbkJnfVxuXHRcdFx0aWNvblBvc2l0aW9uPXtpY29uUG9zaXRpb259XG5cdFx0XHRzcXVhcmVkPXtzcXVhcmVkfVxuXHRcdFx0Y2lyY2xlPXtjaXJjbGV9XG5cdFx0XHRyb3VuZGVkPXtyb3VuZGVkfT5cblx0XHRcdDxJY29uIGljb249e2ljb25OYW1lfS8+XG5cdFx0PC9JY29uV3JhcHBlcj5cblx0XHR9XG5cdDwvQnV0dG9uQ29udGFpbmVyPlxuKTtcblxuQnV0dG9uLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5zdHJpbmcsXG5cdGljb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRpY29uQmc6IFByb3BUeXBlcy5ib29sLFxuXHRpY29uUG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbXCJsZWZ0XCIsIFwicmlnaHRcIl0pLFxuXHRhbmltYXRpb25zOiBQcm9wVHlwZXMuYm9vbCxcblx0dGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG5cdG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXHRyb3VuZGVkOiBQcm9wVHlwZXMuYm9vbCxcblx0c3F1YXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cdHByaW1hcnk6IFByb3BUeXBlcy5ib29sLFxuXHRzZWNvbmRhcnk6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIl19