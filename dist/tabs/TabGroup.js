import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { Children, cloneElement, useState, useEffect } from "react";
import styled from "styled-components";
import { defaultTheme } from "../ui/themes";
import { TabsList, TabsContent, Selector, TabListContainer } from "./styles";
/**
 * @title Tabs component
 *
 * @summary Components/Tab is a simple Tab component using Styled Components and made for reusability
 * @see StyledComponents
 *
 * @version 1.1.0
 * @author [Markus Hudobnik](https://github.com/rnarkus)
 */

var TabGroup = function TabGroup(_ref) {
  var children = _ref.children,
      className = _ref.className,
      active = _ref.active,
      primary = _ref.primary,
      secondary = _ref.secondary,
      rounded = _ref.rounded,
      underline = _ref.underline,
      slider = _ref.slider,
      activeView = _ref.activeView,
      props = _objectWithoutProperties(_ref, ["children", "className", "active", "primary", "secondary", "rounded", "underline", "slider", "activeView"]);

  var _useState = useState(active),
      _useState2 = _slicedToArray(_useState, 2),
      activeTab = _useState2[0],
      setActiveTab = _useState2[1];

  var _useState3 = useState({
    width: "",
    left: ""
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      activeRef = _useState4[0],
      setActiveRef = _useState4[1];

  if (activeView) activeView(activeTab);
  return React.createElement(TabListContainer, {
    underline: underline,
    slider: slider
  }, React.createElement(TabsList, {
    slider: slider
  }, slider && React.createElement(Selector, {
    width: activeRef.width,
    left: activeRef.left
  }), Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      onTabClick: setActiveTab,
      onSendRef: setActiveRef,
      currentTab: activeTab === i,
      primaryAll: primary,
      secondaryAll: secondary,
      roundedAll: rounded,
      underlineAll: underline,
      slider: slider
    });
  })), !slider && React.createElement(TabsContent, {
    slider: slider
  }, Children.map(children, function (child, i) {
    if (i !== activeTab) return undefined;
    return child.props.children;
  })));
};
/** Default Props */


TabGroup.defaultProps = {
  children: "",
  theme: defaultTheme.base,
  active: 0,
  underline: false,
  primary: false,
  secondary: false,
  rounded: false
};
/** Prop Types */

export default TabGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdGFicy9UYWJHcm91cC5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZVN0YXRlIiwidXNlRWZmZWN0Iiwic3R5bGVkIiwiZGVmYXVsdFRoZW1lIiwiVGFic0xpc3QiLCJUYWJzQ29udGVudCIsIlNlbGVjdG9yIiwiVGFiTGlzdENvbnRhaW5lciIsIlRhYkdyb3VwIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJhY3RpdmUiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5Iiwicm91bmRlZCIsInVuZGVybGluZSIsInNsaWRlciIsImFjdGl2ZVZpZXciLCJwcm9wcyIsImFjdGl2ZVRhYiIsInNldEFjdGl2ZVRhYiIsIndpZHRoIiwibGVmdCIsImFjdGl2ZVJlZiIsInNldEFjdGl2ZVJlZiIsIm1hcCIsImNoaWxkIiwiaSIsIml0ZW0iLCJvblRhYkNsaWNrIiwib25TZW5kUmVmIiwiY3VycmVudFRhYiIsInByaW1hcnlBbGwiLCJzZWNvbmRhcnlBbGwiLCJyb3VuZGVkQWxsIiwidW5kZXJsaW5lQWxsIiwidW5kZWZpbmVkIiwiZGVmYXVsdFByb3BzIiwidGhlbWUiLCJiYXNlIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsSUFDQ0MsUUFERCxFQUNXQyxZQURYLEVBQ3lCQyxRQUR6QixFQUNtQ0MsU0FEbkMsUUFFTyxPQUZQO0FBR0EsT0FBT0MsTUFBUCxNQUFtQixtQkFBbkI7QUFJQSxTQUFTQyxZQUFULFFBQTZCLGNBQTdCO0FBQ0EsU0FDQ0MsUUFERCxFQUVDQyxXQUZELEVBR0NDLFFBSEQsRUFJQ0MsZ0JBSkQsUUFLTyxVQUxQO0FBT0E7Ozs7Ozs7Ozs7QUFVQSxJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxPQUVYO0FBQUEsTUFETEMsUUFDSyxRQURMQSxRQUNLO0FBQUEsTUFES0MsU0FDTCxRQURLQSxTQUNMO0FBQUEsTUFEZ0JDLE1BQ2hCLFFBRGdCQSxNQUNoQjtBQUFBLE1BRHdCQyxPQUN4QixRQUR3QkEsT0FDeEI7QUFBQSxNQURpQ0MsU0FDakMsUUFEaUNBLFNBQ2pDO0FBQUEsTUFENENDLE9BQzVDLFFBRDRDQSxPQUM1QztBQUFBLE1BRHFEQyxTQUNyRCxRQURxREEsU0FDckQ7QUFBQSxNQURnRUMsTUFDaEUsUUFEZ0VBLE1BQ2hFO0FBQUEsTUFEd0VDLFVBQ3hFLFFBRHdFQSxVQUN4RTtBQUFBLE1BRHVGQyxLQUN2Rjs7QUFBQSxrQkFDNkJsQixRQUFRLENBQUNXLE1BQUQsQ0FEckM7QUFBQTtBQUFBLE1BQ0VRLFNBREY7QUFBQSxNQUNhQyxZQURiOztBQUFBLG1CQUU2QnBCLFFBQVEsQ0FBQztBQUFFcUIsSUFBQUEsS0FBSyxFQUFFLEVBQVQ7QUFBYUMsSUFBQUEsSUFBSSxFQUFFO0FBQW5CLEdBQUQsQ0FGckM7QUFBQTtBQUFBLE1BRUVDLFNBRkY7QUFBQSxNQUVhQyxZQUZiOztBQUlMLE1BQUlQLFVBQUosRUFBZ0JBLFVBQVUsQ0FBQ0UsU0FBRCxDQUFWO0FBRWhCLFNBQ0Msb0JBQUMsZ0JBQUQ7QUFDQyxJQUFBLFNBQVMsRUFBRUosU0FEWjtBQUVDLElBQUEsTUFBTSxFQUFFQztBQUZULEtBR0Msb0JBQUMsUUFBRDtBQUFVLElBQUEsTUFBTSxFQUFFQTtBQUFsQixLQUNFQSxNQUFNLElBQUksb0JBQUMsUUFBRDtBQUFVLElBQUEsS0FBSyxFQUFFTyxTQUFTLENBQUNGLEtBQTNCO0FBQWtDLElBQUEsSUFBSSxFQUFFRSxTQUFTLENBQUNEO0FBQWxELElBRFosRUFFRXhCLFFBQVEsQ0FBQzJCLEdBQVQsQ0FBYWhCLFFBQWIsRUFBdUIsVUFBQ2lCLEtBQUQsRUFBUUMsQ0FBUjtBQUFBLFdBQWM1QixZQUFZLENBQUMyQixLQUFELEVBQVE7QUFDekRFLE1BQUFBLElBQUksRUFBRUQsQ0FEbUQ7QUFFekRFLE1BQUFBLFVBQVUsRUFBRVQsWUFGNkM7QUFHekRVLE1BQUFBLFNBQVMsRUFBRU4sWUFIOEM7QUFJekRPLE1BQUFBLFVBQVUsRUFBR1osU0FBUyxLQUFLUSxDQUo4QjtBQUt6REssTUFBQUEsVUFBVSxFQUFFcEIsT0FMNkM7QUFNekRxQixNQUFBQSxZQUFZLEVBQUVwQixTQU4yQztBQU96RHFCLE1BQUFBLFVBQVUsRUFBRXBCLE9BUDZDO0FBUXpEcUIsTUFBQUEsWUFBWSxFQUFFcEIsU0FSMkM7QUFTekRDLE1BQUFBLE1BQU0sRUFBTkE7QUFUeUQsS0FBUixDQUExQjtBQUFBLEdBQXZCLENBRkYsQ0FIRCxFQWlCRSxDQUFDQSxNQUFELElBQVcsb0JBQUMsV0FBRDtBQUFhLElBQUEsTUFBTSxFQUFFQTtBQUFyQixLQUNWbEIsUUFBUSxDQUFDMkIsR0FBVCxDQUFhaEIsUUFBYixFQUF1QixVQUFDaUIsS0FBRCxFQUFRQyxDQUFSLEVBQWM7QUFDckMsUUFBSUEsQ0FBQyxLQUFLUixTQUFWLEVBQXFCLE9BQU9pQixTQUFQO0FBQ3JCLFdBQU9WLEtBQUssQ0FBQ1IsS0FBTixDQUFZVCxRQUFuQjtBQUNBLEdBSEEsQ0FEVSxDQWpCYixDQUREO0FBMEJBLENBbENEO0FBcUNBOzs7QUFDQUQsUUFBUSxDQUFDNkIsWUFBVCxHQUF3QjtBQUN2QjVCLEVBQUFBLFFBQVEsRUFBRSxFQURhO0FBRXZCNkIsRUFBQUEsS0FBSyxFQUFFbkMsWUFBWSxDQUFDb0MsSUFGRztBQUd2QjVCLEVBQUFBLE1BQU0sRUFBRSxDQUhlO0FBSXZCSSxFQUFBQSxTQUFTLEVBQUUsS0FKWTtBQUt2QkgsRUFBQUEsT0FBTyxFQUFFLEtBTGM7QUFNdkJDLEVBQUFBLFNBQVMsRUFBRSxLQU5ZO0FBT3ZCQyxFQUFBQSxPQUFPLEVBQUU7QUFQYyxDQUF4QjtBQVdBOztBQWVBLGVBQWVOLFFBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcblx0Q2hpbGRyZW4sIGNsb25lRWxlbWVudCwgdXNlU3RhdGUsIHVzZUVmZmVjdFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cblxuaW1wb3J0IHsgZGVmYXVsdFRoZW1lIH0gZnJvbSBcIi4uL3VpL3RoZW1lc1wiO1xuaW1wb3J0IHtcblx0VGFic0xpc3QsXG5cdFRhYnNDb250ZW50LFxuXHRTZWxlY3Rvcixcblx0VGFiTGlzdENvbnRhaW5lclxufSBmcm9tIFwiLi9zdHlsZXNcIjtcblxuLyoqXG4gKiBAdGl0bGUgVGFicyBjb21wb25lbnRcbiAqXG4gKiBAc3VtbWFyeSBDb21wb25lbnRzL1RhYiBpcyBhIHNpbXBsZSBUYWIgY29tcG9uZW50IHVzaW5nIFN0eWxlZCBDb21wb25lbnRzIGFuZCBtYWRlIGZvciByZXVzYWJpbGl0eVxuICogQHNlZSBTdHlsZWRDb21wb25lbnRzXG4gKlxuICogQHZlcnNpb24gMS4xLjBcbiAqIEBhdXRob3IgW01hcmt1cyBIdWRvYm5pa10oaHR0cHM6Ly9naXRodWIuY29tL3JuYXJrdXMpXG4gKi9cblxuY29uc3QgVGFiR3JvdXAgPSAoe1xuXHRjaGlsZHJlbiwgY2xhc3NOYW1lLCBhY3RpdmUsIHByaW1hcnksIHNlY29uZGFyeSwgcm91bmRlZCwgdW5kZXJsaW5lLCBzbGlkZXIsIGFjdGl2ZVZpZXcsIC4uLnByb3BzXG59KSA9PiB7XG5cdGNvbnN0IFthY3RpdmVUYWIsIHNldEFjdGl2ZVRhYl0gPSB1c2VTdGF0ZShhY3RpdmUpO1xuXHRjb25zdCBbYWN0aXZlUmVmLCBzZXRBY3RpdmVSZWZdID0gdXNlU3RhdGUoeyB3aWR0aDogXCJcIiwgbGVmdDogXCJcIiB9KTtcblxuXHRpZiAoYWN0aXZlVmlldykgYWN0aXZlVmlldyhhY3RpdmVUYWIpO1xuXG5cdHJldHVybiAoXG5cdFx0PFRhYkxpc3RDb250YWluZXJcblx0XHRcdHVuZGVybGluZT17dW5kZXJsaW5lfVxuXHRcdFx0c2xpZGVyPXtzbGlkZXJ9PlxuXHRcdFx0PFRhYnNMaXN0IHNsaWRlcj17c2xpZGVyfT5cblx0XHRcdFx0e3NsaWRlciAmJiA8U2VsZWN0b3Igd2lkdGg9e2FjdGl2ZVJlZi53aWR0aH0gbGVmdD17YWN0aXZlUmVmLmxlZnR9PjwvU2VsZWN0b3I+fVxuXHRcdFx0XHR7Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IGNsb25lRWxlbWVudChjaGlsZCwge1xuXHRcdFx0XHRcdGl0ZW06IGksXG5cdFx0XHRcdFx0b25UYWJDbGljazogc2V0QWN0aXZlVGFiLFxuXHRcdFx0XHRcdG9uU2VuZFJlZjogc2V0QWN0aXZlUmVmLFxuXHRcdFx0XHRcdGN1cnJlbnRUYWI6IChhY3RpdmVUYWIgPT09IGkpLFxuXHRcdFx0XHRcdHByaW1hcnlBbGw6IHByaW1hcnksXG5cdFx0XHRcdFx0c2Vjb25kYXJ5QWxsOiBzZWNvbmRhcnksXG5cdFx0XHRcdFx0cm91bmRlZEFsbDogcm91bmRlZCxcblx0XHRcdFx0XHR1bmRlcmxpbmVBbGw6IHVuZGVybGluZSxcblx0XHRcdFx0XHRzbGlkZXIsXG5cdFx0XHRcdH0pKX1cblx0XHRcdDwvVGFic0xpc3Q+XG5cdFx0XHR7IXNsaWRlciAmJiA8VGFic0NvbnRlbnQgc2xpZGVyPXtzbGlkZXJ9PlxuXHRcdFx0XHR7Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IHtcblx0XHRcdFx0XHRpZiAoaSAhPT0gYWN0aXZlVGFiKSByZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdHJldHVybiBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcblx0XHRcdFx0fSl9XG5cdFx0XHQ8L1RhYnNDb250ZW50Pn1cblx0XHQ8L1RhYkxpc3RDb250YWluZXI+XG5cdCk7XG59O1xuXG5cbi8qKiBEZWZhdWx0IFByb3BzICovXG5UYWJHcm91cC5kZWZhdWx0UHJvcHMgPSB7XG5cdGNoaWxkcmVuOiBcIlwiLFxuXHR0aGVtZTogZGVmYXVsdFRoZW1lLmJhc2UsXG5cdGFjdGl2ZTogMCxcblx0dW5kZXJsaW5lOiBmYWxzZSxcblx0cHJpbWFyeTogZmFsc2UsXG5cdHNlY29uZGFyeTogZmFsc2UsXG5cdHJvdW5kZWQ6IGZhbHNlLFxufTtcblxuXG4vKiogUHJvcCBUeXBlcyAqL1xuVGFiR3JvdXAucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pLFxuXHR0aGVtZTogUHJvcFR5cGVzLm9iamVjdCxcblx0YWN0aXZlOiBQcm9wVHlwZXMubnVtYmVyLFxuXHR1bmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXHRwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0c2Vjb25kYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0cm91bmRlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFRhYkdyb3VwO1xuIl19