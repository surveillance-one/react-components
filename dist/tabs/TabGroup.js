import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { Children, cloneElement, useState } from "react";
import styled from "styled-components";
import PropTypes from "prop-types";
import { defaultTheme } from "../ui/themes";
import { TabsList, TabsContent, Selector, css_tabsbase, css_tabsslider } from "./styles";
/**
 * @title Tabs component
 *
 * @summary Components/Tab is a simple Tab component using Styled Components and made for reusability
 * @see StyledComponents
 *
 * @version 1.1.0
 * @author [Markus Hudobnik](https://github.com/rnarkus)
 */

var TabGroupComponent = function TabGroupComponent(_ref) {
  var children = _ref.children,
      className = _ref.className,
      active = _ref.active,
      primary = _ref.primary,
      secondary = _ref.secondary,
      rounded = _ref.rounded,
      underline = _ref.underline,
      slider = _ref.slider,
      props = _objectWithoutProperties(_ref, ["children", "className", "active", "primary", "secondary", "rounded", "underline", "slider"]);

  var _useState = useState(active),
      _useState2 = _slicedToArray(_useState, 2),
      activeTab = _useState2[0],
      setActiveTab = _useState2[1];

  var _useState3 = useState({
    width: "",
    left: ""
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      activeRef = _useState4[0],
      setActiveRef = _useState4[1];

  return React.createElement("div", Object.assign({
    className: className
  }, props), React.createElement(TabsList, {
    slider: slider
  }, slider && React.createElement(Selector, {
    width: activeRef.width,
    left: activeRef.left
  }), Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      onTabClick: setActiveTab,
      onSendRef: setActiveRef,
      currentTab: activeTab === i,
      primaryAll: primary,
      secondaryAll: secondary,
      roundedAll: rounded,
      underlineAll: underline,
      slider: slider
    });
  })), !slider && React.createElement(TabsContent, {
    slider: slider
  }, Children.map(children, function (child, i) {
    if (i !== activeTab) return undefined;
    return child.props.children;
  })));
};

var TabGroup = styled(TabGroupComponent).withConfig({
  displayName: "TabGroup",
  componentId: "sc-1brek3u-0"
})(["", " ", "{", "}"], css_tabsbase, TabsList, function (p) {
  return p.slider && css_tabsslider;
});
/** Default Props */

TabGroup.defaultProps = {
  children: "",
  theme: defaultTheme.base,
  active: 0,
  underline: false,
  primary: false,
  secondary: false,
  rounded: false
};
/** Prop Types */

TabGroup.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  theme: PropTypes.object,
  active: PropTypes.number,
  underline: PropTypes.bool,
  primary: PropTypes.bool,
  secondary: PropTypes.bool,
  rounded: PropTypes.bool
};
export default TabGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdGFicy9UYWJHcm91cC5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZVN0YXRlIiwic3R5bGVkIiwiUHJvcFR5cGVzIiwiZGVmYXVsdFRoZW1lIiwiVGFic0xpc3QiLCJUYWJzQ29udGVudCIsIlNlbGVjdG9yIiwiY3NzX3RhYnNiYXNlIiwiY3NzX3RhYnNzbGlkZXIiLCJUYWJHcm91cENvbXBvbmVudCIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiYWN0aXZlIiwicHJpbWFyeSIsInNlY29uZGFyeSIsInJvdW5kZWQiLCJ1bmRlcmxpbmUiLCJzbGlkZXIiLCJwcm9wcyIsImFjdGl2ZVRhYiIsInNldEFjdGl2ZVRhYiIsIndpZHRoIiwibGVmdCIsImFjdGl2ZVJlZiIsInNldEFjdGl2ZVJlZiIsIm1hcCIsImNoaWxkIiwiaSIsIml0ZW0iLCJvblRhYkNsaWNrIiwib25TZW5kUmVmIiwiY3VycmVudFRhYiIsInByaW1hcnlBbGwiLCJzZWNvbmRhcnlBbGwiLCJyb3VuZGVkQWxsIiwidW5kZXJsaW5lQWxsIiwidW5kZWZpbmVkIiwiVGFiR3JvdXAiLCJwIiwiZGVmYXVsdFByb3BzIiwidGhlbWUiLCJiYXNlIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsIm5vZGUiLCJvYmplY3QiLCJudW1iZXIiLCJib29sIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFFBQWhCLEVBQTBCQyxZQUExQixFQUF3Q0MsUUFBeEMsUUFBd0QsT0FBeEQ7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLG1CQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFHQSxTQUFTQyxZQUFULFFBQTZCLGNBQTdCO0FBQ0EsU0FDQ0MsUUFERCxFQUVDQyxXQUZELEVBR0NDLFFBSEQsRUFJQ0MsWUFKRCxFQUtDQyxjQUxELFFBTU8sVUFOUDtBQVFBOzs7Ozs7Ozs7O0FBVUEsSUFB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LENBQUNLLFNBQVQsR0FBcUI7QUFDcEJoQyxFQUFBQSxRQUFRLEVBQUVSLFNBQVMsQ0FBQ3lDLFNBQVYsQ0FBb0IsQ0FDN0J6QyxTQUFTLENBQUMwQyxPQUFWLENBQWtCMUMsU0FBUyxDQUFDMkMsSUFBNUIsQ0FENkIsRUFFN0IzQyxTQUFTLENBQUMyQyxJQUZtQixDQUFwQixDQURVO0FBS3BCTCxFQUFBQSxLQUFLLEVBQUV0QyxTQUFTLENBQUM0QyxNQUxHO0FBTXBCbEMsRUFBQUEsTUFBTSxFQUFFVixTQUFTLENBQUM2QyxNQU5FO0FBT3BCL0IsRUFBQUEsU0FBUyxFQUFFZCxTQUFTLENBQUM4QyxJQVBEO0FBUXBCbkMsRUFBQUEsT0FBTyxFQUFFWCxTQUFTLENBQUM4QyxJQVJDO0FBU3BCbEMsRUFBQUEsU0FBUyxFQUFFWixTQUFTLENBQUM4QyxJQVREO0FBVXBCakMsRUFBQUEsT0FBTyxFQUFFYixTQUFTLENBQUM4QztBQVZDLENBQXJCO0FBY0EsZUFBZVgsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tIFwiLi4vdWkvdGhlbWVzXCI7XG5pbXBvcnQge1xuXHRUYWJzTGlzdCxcblx0VGFic0NvbnRlbnQsXG5cdFNlbGVjdG9yLFxuXHRjc3NfdGFic2Jhc2UsXG5cdGNzc190YWJzc2xpZGVyXG59IGZyb20gXCIuL3N0eWxlc1wiO1xuXG4vKipcbiAqIEB0aXRsZSBUYWJzIGNvbXBvbmVudFxuICpcbiAqIEBzdW1tYXJ5IENvbXBvbmVudHMvVGFiIGlzIGEgc2ltcGxlIFRhYiBjb21wb25lbnQgdXNpbmcgU3R5bGVkIENvbXBvbmVudHMgYW5kIG1hZGUgZm9yIHJldXNhYmlsaXR5XG4gKiBAc2VlIFN0eWxlZENvbXBvbmVudHNcbiAqXG4gKiBAdmVyc2lvbiAxLjEuMFxuICogQGF1dGhvciBbTWFya3VzIEh1ZG9ibmlrXShodHRwczovL2dpdGh1Yi5jb20vcm5hcmt1cylcbiAqL1xuXG5jb25zdCBUYWJHcm91cENvbXBvbmVudCA9ICh7XG5cdGNoaWxkcmVuLCBjbGFzc05hbWUsIGFjdGl2ZSwgcHJpbWFyeSwgc2Vjb25kYXJ5LCByb3VuZGVkLCB1bmRlcmxpbmUsIHNsaWRlciwgLi4ucHJvcHNcbn0pID0+IHtcblx0Y29uc3QgW2FjdGl2ZVRhYiwgc2V0QWN0aXZlVGFiXSA9IHVzZVN0YXRlKGFjdGl2ZSk7XG5cdGNvbnN0IFthY3RpdmVSZWYsIHNldEFjdGl2ZVJlZl0gPSB1c2VTdGF0ZSh7XG5cdFx0d2lkdGg6IFwiXCIsXG5cdFx0bGVmdDogXCJcIlxuXHR9KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30+XG5cdFx0XHQ8VGFic0xpc3Qgc2xpZGVyPXtzbGlkZXJ9PlxuXHRcdFx0XHR7c2xpZGVyICYmIDxTZWxlY3RvciB3aWR0aD17YWN0aXZlUmVmLndpZHRofSBsZWZ0PXthY3RpdmVSZWYubGVmdH0+PC9TZWxlY3Rvcj59XG5cdFx0XHRcdHtDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaSkgPT4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG5cdFx0XHRcdFx0aXRlbTogaSxcblx0XHRcdFx0XHRvblRhYkNsaWNrOiBzZXRBY3RpdmVUYWIsXG5cdFx0XHRcdFx0b25TZW5kUmVmOiBzZXRBY3RpdmVSZWYsXG5cdFx0XHRcdFx0Y3VycmVudFRhYjogKGFjdGl2ZVRhYiA9PT0gaSksXG5cdFx0XHRcdFx0cHJpbWFyeUFsbDogcHJpbWFyeSxcblx0XHRcdFx0XHRzZWNvbmRhcnlBbGw6IHNlY29uZGFyeSxcblx0XHRcdFx0XHRyb3VuZGVkQWxsOiByb3VuZGVkLFxuXHRcdFx0XHRcdHVuZGVybGluZUFsbDogdW5kZXJsaW5lLFxuXHRcdFx0XHRcdHNsaWRlclxuXHRcdFx0XHR9KSl9XG5cdFx0XHQ8L1RhYnNMaXN0PlxuXHRcdFx0eyFzbGlkZXIgJiYgPFRhYnNDb250ZW50IHNsaWRlcj17c2xpZGVyfT5cblx0XHRcdFx0e0NoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGkgIT09IGFjdGl2ZVRhYikgcmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0XHRyZXR1cm4gY2hpbGQucHJvcHMuY2hpbGRyZW47XG5cdFx0XHRcdH0pfVxuXHRcdFx0PC9UYWJzQ29udGVudD59XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5jb25zdCBUYWJHcm91cCA9IHN0eWxlZChUYWJHcm91cENvbXBvbmVudClgXG5cdCR7Y3NzX3RhYnNiYXNlfVxuXG5cdCR7VGFic0xpc3R9IHtcblx0XHQke3AgPT4gcC5zbGlkZXIgJiYgY3NzX3RhYnNzbGlkZXJ9XG5cdH1cbmA7XG5cbi8qKiBEZWZhdWx0IFByb3BzICovXG5UYWJHcm91cC5kZWZhdWx0UHJvcHMgPSB7XG5cdGNoaWxkcmVuOiBcIlwiLFxuXHR0aGVtZTogZGVmYXVsdFRoZW1lLmJhc2UsXG5cdGFjdGl2ZTogMCxcblx0dW5kZXJsaW5lOiBmYWxzZSxcblx0cHJpbWFyeTogZmFsc2UsXG5cdHNlY29uZGFyeTogZmFsc2UsXG5cdHJvdW5kZWQ6IGZhbHNlLFxufTtcblxuXG4vKiogUHJvcCBUeXBlcyAqL1xuVGFiR3JvdXAucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pLFxuXHR0aGVtZTogUHJvcFR5cGVzLm9iamVjdCxcblx0YWN0aXZlOiBQcm9wVHlwZXMubnVtYmVyLFxuXHR1bmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXHRwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0c2Vjb25kYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblx0cm91bmRlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFRhYkdyb3VwO1xuIl19