import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useCallback, useRef, useEffect } from "react";
import DayPicker from "react-day-picker";
import "react-day-picker/lib/style.css";
import useOutClick from "../hooks/useOutClick";
import { IconWrapper } from "../ui/styles/globals";
import { Icon } from "../icon";
import { InputContainer, InputWrapper, DayPickerWrapper } from "./styles";

var InputDate = function InputDate(_ref) {
  var type = _ref.type,
      placeholder = _ref.placeholder,
      iconName = _ref.iconName,
      iconBg = _ref.iconBg,
      _ref$iconPosition = _ref.iconPosition,
      iconPosition = _ref$iconPosition === void 0 ? "left" : _ref$iconPosition,
      fullWidth = _ref.fullWidth,
      handleChange = _ref.handleChange,
      valStart = _ref.valStart,
      setVal = _ref.setVal;
  var node = useRef();
  var dateNode = useRef(); // const [val, setVal] = useState(new Date(valStart).toLocaleDateString());

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      valDate = _useState2[0],
      setValDate = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      dayShow = _useState4[0],
      setDayShow = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      rectRight = _useState6[0],
      setRectRight = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      rectLeft = _useState8[0],
      setRectLeft = _useState8[1];

  console.log(new Date(valStart).toLocaleDateString());
  console.log(valStart);
  useEffect(function () {
    if (dateNode.current) {
      var rect = dateNode.current.getBoundingClientRect();
      if (rect.right > document.documentElement.offsetWidth) setRectRight(true);
      if (rect.left < 0) setRectLeft(true);
    }
  }, []); // useEffect(() => {
  // }, [onDayClick])

  useOutClick(setDayShow, node);

  var onDayClick = function onDayClick(day) {
    var newDay = day.toLocaleDateString();
    setVal({
      date: newDay
    }); // setVal(newDay);

    setValDate(true);
    setDayShow(false);
  };

  var onInputClick = useCallback(function () {
    setDayShow(!dayShow);
  }, [dayShow]);

  var validateDate = function validateDate(e) {
    var curVal = e.target.value;
    var regExDate = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    var match = !!curVal.match(regExDate);
    if (match) setValDate(true);else setValDate(false);
  };

  var handleChange1 = function handleChange1(e) {
    handleChange("date", e);
    validateDate(e); // setVal(e.target.value);
  };

  return React.createElement(InputWrapper, {
    match: valDate,
    ref: node,
    type: type,
    placeholder: placeholder,
    iconName: iconName,
    iconPosition: iconPosition,
    fullWidth: fullWidth
  }, React.createElement(InputContainer, {
    onClick: onInputClick,
    placeholder: placeholder,
    value: valStart,
    onChange: handleChange1
  }), iconName && React.createElement(IconWrapper, {
    bg: iconBg,
    iconPosition: iconPosition
  }, React.createElement(Icon, {
    icon: iconName
  })), dayShow && React.createElement(DayPickerWrapper, {
    ref: dateNode,
    rectRight: rectRight,
    rectLeft: rectLeft
  }, React.createElement(DayPicker, {
    onDayClick: onDayClick
  })));
};

export default InputDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,