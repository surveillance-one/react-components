import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useCallback, useRef, useEffect } from "react";
import DayPicker from "react-day-picker";
import "react-day-picker/lib/style.css";
import useOutClick from "../hooks/useOutClick";
import { IconWrapper } from "../ui/styles/globals";
import { Icon } from "../icon";
import { InputContainer, InputWrapper, DayPickerWrapper } from "./styles";

var InputDate = function InputDate(_ref) {
  var type = _ref.type,
      placeholder = _ref.placeholder,
      iconName = _ref.iconName,
      iconBg = _ref.iconBg,
      _ref$iconPosition = _ref.iconPosition,
      iconPosition = _ref$iconPosition === void 0 ? "left" : _ref$iconPosition,
      fullWidth = _ref.fullWidth,
      valueFn = _ref.valueFn,
      valStart = _ref.valStart;
  var node = useRef();

  var _useState = useState(new Date(valStart).toLocaleDateString()),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      valDate = _useState4[0],
      setValDate = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      dayShow = _useState6[0],
      setDayShow = _useState6[1]; // TODO: DECOUPLE STATE IN THE APP AND LET THAT BE ON WHERE EVER ITS IMPLEMENTED


  console.log("shouuld change", val);
  useOutClick(setDayShow, node); // setVal(new Date(valStart).toLocaleDateString());

  useEffect(function () {
    if (valueFn) valueFn(val);
  }, [val]);

  var onDayClick = function onDayClick(day) {
    var newDay = day.toLocaleDateString();
    setVal(newDay);
    setValDate(true);
    setDayShow(false);
  };

  var onInputClick = useCallback(function () {
    setDayShow(!dayShow);
  }, [dayShow]);

  var validateDate = function validateDate(e) {
    var curVal = e.target.value;
    var regExDate = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    var match = !!curVal.match(regExDate);
    if (match) setValDate(true);else setValDate(false);
  };

  var handleChange = function handleChange(e) {
    validateDate(e);
    setVal(e.target.value);
  };

  return React.createElement(InputWrapper, {
    match: valDate,
    ref: node,
    type: type,
    placeholder: placeholder,
    iconName: iconName,
    iconPosition: iconPosition,
    fullWidth: fullWidth
  }, React.createElement(InputContainer, {
    onClick: onInputClick,
    placeholder: placeholder,
    value: val,
    onChange: handleChange
  }), iconName && React.createElement(IconWrapper, {
    bg: iconBg,
    iconPosition: iconPosition
  }, React.createElement(Icon, {
    icon: iconName
  })), dayShow && React.createElement(DayPickerWrapper, null, React.createElement(DayPicker, {
    onDayClick: onDayClick
  })));
};

export default InputDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZm9ybS9JbnB1dERhdGUuanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZVJlZiIsInVzZUVmZmVjdCIsIkRheVBpY2tlciIsInVzZU91dENsaWNrIiwiSWNvbldyYXBwZXIiLCJJY29uIiwiSW5wdXRDb250YWluZXIiLCJJbnB1dFdyYXBwZXIiLCJEYXlQaWNrZXJXcmFwcGVyIiwiSW5wdXREYXRlIiwidHlwZSIsInBsYWNlaG9sZGVyIiwiaWNvbk5hbWUiLCJpY29uQmciLCJpY29uUG9zaXRpb24iLCJmdWxsV2lkdGgiLCJ2YWx1ZUZuIiwidmFsU3RhcnQiLCJub2RlIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInZhbCIsInNldFZhbCIsInZhbERhdGUiLCJzZXRWYWxEYXRlIiwiZGF5U2hvdyIsInNldERheVNob3ciLCJjb25zb2xlIiwibG9nIiwib25EYXlDbGljayIsImRheSIsIm5ld0RheSIsIm9uSW5wdXRDbGljayIsInZhbGlkYXRlRGF0ZSIsImUiLCJjdXJWYWwiLCJ0YXJnZXQiLCJ2YWx1ZSIsInJlZ0V4RGF0ZSIsIm1hdGNoIiwiaGFuZGxlQ2hhbmdlIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxJQUNDQyxRQURELEVBQ1dDLFdBRFgsRUFDd0JDLE1BRHhCLEVBQ2dDQyxTQURoQyxRQUVPLE9BRlA7QUFJQSxPQUFPQyxTQUFQLE1BQXNCLGtCQUF0QjtBQUNBLE9BQU8sZ0NBQVA7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLHNCQUF4QjtBQUVBLFNBQVNDLFdBQVQsUUFBNEIsc0JBQTVCO0FBRUEsU0FBU0MsSUFBVCxRQUFxQixTQUFyQjtBQUVBLFNBQ0NDLGNBREQsRUFDaUJDLFlBRGpCLEVBQytCQyxnQkFEL0IsUUFFTyxVQUZQOztBQUlBLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLE9BRVo7QUFBQSxNQURMQyxJQUNLLFFBRExBLElBQ0s7QUFBQSxN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RW1CO0FBSlgsSUFSRCxFQWFFNUIsUUFBUSxJQUNWLG9CQUFDLFdBQUQ7QUFDQyxJQUFBLEVBQUUsRUFBRUMsTUFETDtBQUVDLElBQUEsWUFBWSxFQUFFQztBQUZmLEtBR0Msb0JBQUMsSUFBRDtBQUFNLElBQUEsSUFBSSxFQUFFRjtBQUFaLElBSEQsQ0FkQSxFQW1CRWEsT0FBTyxJQUNSLG9CQUFDLGdCQUFELFFBQ0Msb0JBQUMsU0FBRDtBQUFXLElBQUEsVUFBVSxFQUFFSTtBQUF2QixJQURELENBcEJELENBREQ7QUE0QkEsQ0ExRUQ7O0FBaUZBLGVBQWVwQixTQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7XG5cdHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VFZmZlY3Rcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgRGF5UGlja2VyIGZyb20gXCJyZWFjdC1kYXktcGlja2VyXCI7XG5pbXBvcnQgXCJyZWFjdC1kYXktcGlja2VyL2xpYi9zdHlsZS5jc3NcIjtcbmltcG9ydCB1c2VPdXRDbGljayBmcm9tIFwiLi4vaG9va3MvdXNlT3V0Q2xpY2tcIjtcblxuaW1wb3J0IHsgSWNvbldyYXBwZXIgfSBmcm9tIFwiLi4vdWkvc3R5bGVzL2dsb2JhbHNcIjtcblxuaW1wb3J0IHsgSWNvbiB9IGZyb20gXCIuLi9pY29uXCI7XG5cbmltcG9ydCB7XG5cdElucHV0Q29udGFpbmVyLCBJbnB1dFdyYXBwZXIsIERheVBpY2tlcldyYXBwZXJcbn0gZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmNvbnN0IElucHV0RGF0ZSA9ICh7XG5cdHR5cGUsIHBsYWNlaG9sZGVyLCBpY29uTmFtZSwgaWNvbkJnLCBpY29uUG9zaXRpb24gPSBcImxlZnRcIiwgZnVsbFdpZHRoLCB2YWx1ZUZuLCB2YWxTdGFydFxufSkgPT4ge1xuXHRjb25zdCBub2RlID0gdXNlUmVmKCk7XG5cdGNvbnN0IFt2YWwsIHNldFZhbF0gPSB1c2VTdGF0ZShuZXcgRGF0ZSh2YWxTdGFydCkudG9Mb2NhbGVEYXRlU3RyaW5nKCkpO1xuXHRjb25zdCBbdmFsRGF0ZSwgc2V0VmFsRGF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cdGNvbnN0IFtkYXlTaG93LCBzZXREYXlTaG93XSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuXG5cdC8vIFRPRE86IERFQ09VUExFIFNUQVRFIElOIFRIRSBBUFAgQU5EIExFVCBUSEFUIEJFIE9OIFdIRVJFIEVWRVIgSVRTIElNUExFTUVOVEVEXG5cdGNvbnNvbGUubG9nKFwic2hvdXVsZCBjaGFuZ2VcIiwgdmFsKTtcblxuXHR1c2VPdXRDbGljayhzZXREYXlTaG93LCBub2RlKTtcblxuXHQvLyBzZXRWYWwobmV3IERhdGUodmFsU3RhcnQpLnRvTG9jYWxlRGF0ZVN0cmluZygpKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmICh2YWx1ZUZuKSB2YWx1ZUZuKHZhbCk7XG5cdH0sIFt2YWxdKTtcblxuXHRjb25zdCBvbkRheUNsaWNrID0gKGRheSkgPT4ge1xuXHRcdGNvbnN0IG5ld0RheSA9IGRheS50b0xvY2FsZURhdGVTdHJpbmcoKTtcblx0XHRzZXRWYWwobmV3RGF5KTtcblx0XHRzZXRWYWxEYXRlKHRydWUpO1xuXHRcdHNldERheVNob3coZmFsc2UpO1xuXHR9O1xuXG5cdGNvbnN0IG9uSW5wdXRDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcblx0XHRzZXREYXlTaG93KCFkYXlTaG93KTtcblx0fSwgW2RheVNob3ddKTtcblxuXG5cdGNvbnN0IHZhbGlkYXRlRGF0ZSA9IChlKSA9PiB7XG5cdFx0Y29uc3QgY3VyVmFsID0gZS50YXJnZXQudmFsdWU7XG5cdFx0Y29uc3QgcmVnRXhEYXRlID0gL15cXGR7MSwyfVxcL1xcZHsxLDJ9XFwvXFxkezR9JC87XG5cblx0XHRjb25zdCBtYXRjaCA9ICEhY3VyVmFsLm1hdGNoKHJlZ0V4RGF0ZSk7XG5cdFx0aWYgKG1hdGNoKSBzZXRWYWxEYXRlKHRydWUpO1xuXHRcdGVsc2Ugc2V0VmFsRGF0ZShmYWxzZSk7XG5cdH07XG5cblx0Y29uc3QgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcblx0XHR2YWxpZGF0ZURhdGUoZSk7XG5cdFx0c2V0VmFsKGUudGFyZ2V0LnZhbHVlKTtcblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxJbnB1dFdyYXBwZXJcblx0XHRcdG1hdGNoPXt2YWxEYXRlfVxuXHRcdFx0cmVmPXtub2RlfVxuXHRcdFx0dHlwZT17dHlwZX1cblx0XHRcdHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cblx0XHRcdGljb25OYW1lPXtpY29uTmFtZX1cblx0XHRcdGljb25Qb3NpdGlvbj17aWNvblBvc2l0aW9ufVxuXHRcdFx0ZnVsbFdpZHRoPXtmdWxsV2lkdGh9PlxuXHRcdFx0PElucHV0Q29udGFpbmVyXG5cdFx0XHRcdG9uQ2xpY2s9e29uSW5wdXRDbGlja31cblx0XHRcdFx0cGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuXHRcdFx0XHR2YWx1ZT17dmFsfVxuXHRcdFx0XHRvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfS8+XG5cdFx0XHR7aWNvbk5hbWUgJiZcblx0XHQ8SWNvbldyYXBwZXJcblx0XHRcdGJnPXtpY29uQmd9XG5cdFx0XHRpY29uUG9zaXRpb249e2ljb25Qb3NpdGlvbn0+XG5cdFx0XHQ8SWNvbiBpY29uPXtpY29uTmFtZX0vPlxuXHRcdDwvSWNvbldyYXBwZXI+fVxuXHRcdFx0e2RheVNob3cgJiZcblx0XHRcdDxEYXlQaWNrZXJXcmFwcGVyPlxuXHRcdFx0XHQ8RGF5UGlja2VyIG9uRGF5Q2xpY2s9e29uRGF5Q2xpY2t9Lz5cblx0XHRcdDwvRGF5UGlja2VyV3JhcHBlcj5cblx0XHRcdH1cblx0XHQ8L0lucHV0V3JhcHBlcj5cblx0KTtcblxufTtcblxuSW5wdXREYXRlLnByb3BUeXBlcyA9IHtcblx0dHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblx0cGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnB1dERhdGU7XG4iXX0=