import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useCallback, useRef, useEffect } from "react";

/* Imports Day Picker 3rd party library TODO: Make custom Day Picker */
import DayPicker from "react-day-picker";
import "react-day-picker/lib/style.css";
/* Import validatation Regex */

import { regExDate, regExHour } from "../utils/regexValidate";
/* Hook for watching outside clicks */

import useOutClick from "../hooks/useOutClick";
/* Imports from Global Styling */

import { IconWrapper } from "../ui/styles/globals";
import { Icon } from "../icon";
/* Per component styling */

import { InputContainer, InputWrapper, DayPickerWrapper } from "./styles";
/**
 * @title Input Date
 *
 * @summary Input Date Component that uses a 3rd party library to display a calendar day picker. Also supports hour input
 * @see StyledComponents
 *
 * @version 1.0.0
 * @author [SurveillanceOne][Markus Hudobnik](https://github.com/SurveillanceOne)
 */

var InputDate = function InputDate(_ref) {
  var _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? "Date" : _ref$placeholder,
      _ref$iconPosition = _ref.iconPosition,
      iconPosition = _ref$iconPosition === void 0 ? "left" : _ref$iconPosition,
      _ref$time = _ref.time,
      time = _ref$time === void 0 ? "date" : _ref$time,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "text" : _ref$type,
      iconName = _ref.iconName,
      iconBg = _ref.iconBg,
      fullWidth = _ref.fullWidth,
      handleChange = _ref.handleChange,
      val = _ref.val,
      disabled = _ref.disabled,
      name = _ref.name;
  var node = useRef();
  var dateNode = useRef();

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      valDate = _useState2[0],
      setValDate = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      dayShow = _useState4[0],
      setDayShow = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      rectRight = _useState6[0],
      setRectRight = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      rectLeft = _useState8[0],
      setRectLeft = _useState8[1];

  useOutClick(setDayShow, node);
  useEffect(function () {
    if (dateNode.current) {
      var rect = dateNode.current.getBoundingClientRect();
      if (rect.right > document.documentElement.offsetWidth) setRectRight(true);
      if (rect.left < 0) setRectLeft(true);
    }
  }, [dayShow]);

  var onDayClick = function onDayClick(day) {
    var obj = {
      target: {
        name: name,
        value: day.toLocaleDateString()
      }
    };
    handleChange(obj);
    setValDate(true);
    setDayShow(false);
  };

  var onInputClick = useCallback(function () {
    if (time == "date") setDayShow(!dayShow);
  }, [dayShow]);

  var validateInput = function validateInput(e) {
    console.log(regExDate, valDate);
    var curVal = e.target.value;
    var regex = time == "date" ? regExDate : regExHour;
    if (!!curVal.match(regex)) setValDate(true);else setValDate(false);
  };

  var handleChangeValidate = function handleChangeValidate(e) {
    handleChange(e);
    validateInput(e);
  };

  return React.createElement(InputWrapper, {
    match: valDate,
    ref: node,
    type: type,
    placeholder: placeholder,
    iconName: iconName,
    iconPosition: iconPosition,
    disabled: time == "hour" ? disabled : false,
    fullWidth: fullWidth
  }, React.createElement(InputContainer, {
    onClick: onInputClick,
    name: name,
    disabled: time == "hour" ? disabled : false,
    placeholder: placeholder,
    value: val,
    onChange: handleChangeValidate
  }), iconName && React.createElement(IconWrapper, {
    bg: iconBg,
    iconPosition: iconPosition
  }, React.createElement(Icon, {
    icon: iconName
  })), dayShow && React.createElement(DayPickerWrapper, {
    ref: dateNode,
    rectRight: rectRight,
    rectLeft: rectLeft
  }, React.createElement(DayPicker, {
    onDayClick: onDayClick
  })));
};

export default InputDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,