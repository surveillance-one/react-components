import React from "react";
import { IconWrapper } from "../ui/styles/globals";
import { Icon } from "../icon";
import { InputContainer, InputWrapper, InputCheckbox, HiddenInputCheckbox, InputLabel } from "./styles";

var Input = function Input(_ref) {
  var iconName = _ref.iconName,
      iconBg = _ref.iconBg,
      fullWidth = _ref.fullWidth,
      handleChange = _ref.handleChange,
      val = _ref.val,
      checked = _ref.checked,
      name = _ref.name,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "text" : _ref$type,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? "Input" : _ref$placeholder,
      _ref$iconPosition = _ref.iconPosition,
      iconPosition = _ref$iconPosition === void 0 ? "left" : _ref$iconPosition;
  return React.createElement(InputWrapper, {
    type: type,
    match: true,
    checked: checked,
    placeholder: placeholder,
    iconName: iconName,
    iconPosition: iconPosition,
    fullWidth: fullWidth
  }, type != "checkbox" && React.createElement(InputContainer, {
    name: name,
    placeholder: placeholder,
    value: val,
    onChange: handleChange
  }), type == "checkbox" && React.createElement(InputLabel, null, React.createElement(HiddenInputCheckbox, {
    checked: checked,
    onChange: handleChange,
    name: name,
    type: "checkbox"
  }), React.createElement(InputCheckbox, {
    checked: checked
  }, checked && React.createElement(Icon, {
    icon: "check"
  }))), iconName && React.createElement(IconWrapper, {
    bg: iconBg,
    iconPosition: iconPosition
  }, React.createElement(Icon, {
    icon: iconName
  })));
};

export default Input;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZm9ybS9JbnB1dC5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJJY29uV3JhcHBlciIsIkljb24iLCJJbnB1dENvbnRhaW5lciIsIklucHV0V3JhcHBlciIsIklucHV0Q2hlY2tib3giLCJIaWRkZW5JbnB1dENoZWNrYm94IiwiSW5wdXRMYWJlbCIsIklucHV0IiwiaWNvbk5hbWUiLCJpY29uQmciLCJmdWxsV2lkdGgiLCJoYW5kbGVDaGFuZ2UiLCJ2YWwiLCJjaGVja2VkIiwibmFtZSIsInR5cGUiLCJwbGFjZWhvbGRlciIsImljb25Qb3NpdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUdBLFNBQVNDLFdBQVQsUUFBNEIsc0JBQTVCO0FBRUEsU0FBU0MsSUFBVCxRQUFxQixTQUFyQjtBQUVBLFNBQ0NDLGNBREQsRUFDaUJDLFlBRGpCLEVBQytCQyxhQUQvQixFQUM4Q0MsbUJBRDlDLEVBQ21FQyxVQURuRSxRQUVPLFVBRlA7O0FBSUEsSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQVE7QUFBQSxNQUNiQyxRQURhLFFBQ2JBLFFBRGE7QUFBQSxNQUNIQyxNQURHLFFBQ0hBLE1BREc7QUFBQSxNQUNLQyxTQURMLFFBQ0tBLFNBREw7QUFBQSxNQUNnQkMsWUFEaEIsUUFDZ0JBLFlBRGhCO0FBQUEsTUFDOEJDLEdBRDlCLFFBQzhCQSxHQUQ5QjtBQUFBLE1BQ21DQyxPQURuQyxRQUNtQ0EsT0FEbkM7QUFBQSxNQUM0Q0MsSUFENUMsUUFDNENBLElBRDVDO0FBQUEsdUJBRWJDLElBRmE7QUFBQSxNQUViQSxJQUZhLDBCQUVOLE1BRk07QUFBQSw4QkFHYkMsV0FIYTtBQUFBLE1BR2JBLFdBSGEsaUNBR0MsT0FIRDtBQUFBLCtCQUliQyxZQUphO0FBQUEsTUFJYkEsWUFKYSxrQ0FJRSxNQUpGO0FBQUEsU0FNYixvQkFBQyxZQUFEO0FBQ0MsSUFBQSxJQUFJLEVBQUVGLElBRFA7QUFFQyxJQUFBLEtBQUssRUFBRSxJQUZSO0FBR0MsSUFBQSxPQUFPLEVBQUVGLE9BSFY7QUFJQyxJQUFBLFdBQVcsRUFBRUcsV0FKZDtBQUtDLElBQUEsUUFBUSxFQUFFUixRQUxYO0FBTUMsSUFBQSxZQUFZLEVBQUVTLFlBTmY7QUFPQyxJQUFBLFNBQVMsRUFBRVA7QUFQWixLQVFFSyxJQUFJLElBQUksVUFBUixJQUNBLG9CQUFDLGNBQUQ7QUFDQyxJQUFBLElBQUksRUFBRUQsSUFEUDtBQUVDLElBQUEsV0FBVyxFQUFFRSxXQUZkO0FBR0MsSUFBQSxLQUFLLEVBQUVKLEdBSFI7QUFJQyxJQUFBLFFBQVEsRUFBRUQ7QUFKWCxJQVRGLEVBZUVJLElBQUksSUFBSSxVQUFSLElBQ0Esb0JBQUMsVUFBRCxRQUNDLG9CQUFDLG1CQUFEO0FBQXFCLElBQUEsT0FBTyxFQUFFRixPQUE5QjtBQUF1QyxJQUFBLFFBQVEsRUFBRUYsWUFBakQ7QUFBK0QsSUFBQSxJQUFJLEVBQUVHLElBQXJFO0FBQTJFLElBQUEsSUFBSSxFQUFDO0FBQWhGLElBREQsRUFFQyxvQkFBQyxhQUFEO0FBQWUsSUFBQSxPQUFPLEVBQUVEO0FBQXhCLEtBQ0VBLE9BQU8sSUFBSSxvQkFBQyxJQUFEO0FBQU0sSUFBQSxJQUFJLEVBQUM7QUFBWCxJQURiLENBRkQsQ0FoQkYsRUF1QkVMLFFBQVEsSUFDUixvQkFBQyxXQUFEO0FBQ0MsSUFBQSxFQUFFLEVBQUVDLE1BREw7QUFFQyxJQUFBLFlBQVksRUFBRVE7QUFGZixLQUdDLG9CQUFDLElBQUQ7QUFBTSxJQUFBLElBQUksRUFBRVQ7QUFBWixJQUhELENBeEJGLENBTmE7QUFBQSxDQUFkOztBQW1EQSxlQUFlRCxLQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5pbXBvcnQgeyBJY29uV3JhcHBlciB9IGZyb20gXCIuLi91aS9zdHlsZXMvZ2xvYmFsc1wiO1xuXG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIi4uL2ljb25cIjtcblxuaW1wb3J0IHtcblx0SW5wdXRDb250YWluZXIsIElucHV0V3JhcHBlciwgSW5wdXRDaGVja2JveCwgSGlkZGVuSW5wdXRDaGVja2JveCwgSW5wdXRMYWJlbFxufSBmcm9tIFwiLi9zdHlsZXNcIjtcblxuY29uc3QgSW5wdXQgPSAoe1xuXHRpY29uTmFtZSwgaWNvbkJnLCBmdWxsV2lkdGgsIGhhbmRsZUNoYW5nZSwgdmFsLCBjaGVja2VkLCBuYW1lLFxuXHR0eXBlID0gXCJ0ZXh0XCIsXG5cdHBsYWNlaG9sZGVyID0gXCJJbnB1dFwiLFxuXHRpY29uUG9zaXRpb24gPSBcImxlZnRcIixcbn0pID0+IChcblx0PElucHV0V3JhcHBlclxuXHRcdHR5cGU9e3R5cGV9XG5cdFx0bWF0Y2g9e3RydWV9XG5cdFx0Y2hlY2tlZD17Y2hlY2tlZH1cblx0XHRwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG5cdFx0aWNvbk5hbWU9e2ljb25OYW1lfVxuXHRcdGljb25Qb3NpdGlvbj17aWNvblBvc2l0aW9ufVxuXHRcdGZ1bGxXaWR0aD17ZnVsbFdpZHRofT5cblx0XHR7dHlwZSAhPSBcImNoZWNrYm94XCIgJiZcblx0XHRcdDxJbnB1dENvbnRhaW5lclxuXHRcdFx0XHRuYW1lPXtuYW1lfVxuXHRcdFx0XHRwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG5cdFx0XHRcdHZhbHVlPXt2YWx9XG5cdFx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9Lz5cblx0XHR9XG5cdFx0e3R5cGUgPT0gXCJjaGVja2JveFwiICYmXG5cdFx0XHQ8SW5wdXRMYWJlbD5cblx0XHRcdFx0PEhpZGRlbklucHV0Q2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gbmFtZT17bmFtZX0gdHlwZT1cImNoZWNrYm94XCIvPlxuXHRcdFx0XHQ8SW5wdXRDaGVja2JveCBjaGVja2VkPXtjaGVja2VkfT5cblx0XHRcdFx0XHR7Y2hlY2tlZCAmJiA8SWNvbiBpY29uPVwiY2hlY2tcIi8+fVxuXHRcdFx0XHQ8L0lucHV0Q2hlY2tib3g+XG5cdFx0XHQ8L0lucHV0TGFiZWw+XG5cdFx0fVxuXHRcdHtpY29uTmFtZSAmJlxuXHRcdFx0PEljb25XcmFwcGVyXG5cdFx0XHRcdGJnPXtpY29uQmd9XG5cdFx0XHRcdGljb25Qb3NpdGlvbj17aWNvblBvc2l0aW9ufT5cblx0XHRcdFx0PEljb24gaWNvbj17aWNvbk5hbWV9Lz5cblx0XHRcdDwvSWNvbldyYXBwZXI+XG5cdFx0fVxuXHQ8L0lucHV0V3JhcHBlcj5cbik7XG5cbklucHV0LnByb3BUeXBlcyA9IHtcblx0dHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblx0aWNvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGljb25CZzogUHJvcFR5cGVzLnN0cmluZyxcblx0aWNvblBvc2l0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXHRoYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXHR2YWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiJdfQ==