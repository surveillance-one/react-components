import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect, Children, cloneElement, useCallback, useRef } from "react";
import styled from "styled-components";
import PropTypes from "prop-types";
import useOutClick from "../hooks/useOutClick";
import { defaultTheme } from "../ui/themes";
import { Icon } from "../icon";
import { DropdownList, DropdownHeaderTitle, IconArrow, css_dropdownbase } from "./styles";
/** Once dropdown styling is done:
 * TODO: update defaultProps and PropTypes
 */

var DropdownComponent = function DropdownComponent(_ref) {
  var valueChange = _ref.valueChange,
      title = _ref.title,
      children = _ref.children,
      status = _ref.status,
      className = _ref.className;
  var node = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      listOpen = _useState2[0],
      setListOpen = _useState2[1];

  var _useState3 = useState(title),
      _useState4 = _slicedToArray(_useState3, 2),
      headerTitle = _useState4[0],
      setHeaderTitle = _useState4[1];

  var _useState5 = useState("-1"),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedID = _useState6[0],
      setSelectedID = _useState6[1];

  useEffect(function () {
    if (valueChange) valueChange(selectedID);
  }, [selectedID, valueChange]);
  var cb = useCallback(function () {
    setListOpen(false);
  }, []);
  useOutClick(cb, node);

  function selectItem(title, id) {
    setHeaderTitle(title);
    setListOpen(false);
    setSelectedID(id);
  }

  var listItems = React.createElement(DropdownList, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      currentSelection: headerTitle === child.props.children,
      onItemClick: selectItem,
      status: status
    });
  }));
  var iconStyle = listOpen ? "chevron-up" : "chevron-down";
  return React.createElement("div", {
    className: className,
    tabIndex: "1",
    ref: node,
    onClick: function onClick(e) {
      return setListOpen(!listOpen);
    }
  }, React.createElement(DropdownHeaderTitle, null, headerTitle), React.createElement(IconArrow, null, React.createElement(Icon, {
    icon: iconStyle
  })), listOpen && listItems);
};

var Dropdown = styled(DropdownComponent).withConfig({
  displayName: "Dropdown",
  componentId: "sc-2m7s6m-0"
})(["", ""], css_dropdownbase);
/** Default */

Dropdown.defaultProps = {
  theme: defaultTheme.base
};
/** Props */

Dropdown.propTypes = {
  children: PropTypes.oneOf([PropTypes.node])
};
export default Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJvcGRvd24vRHJvcGRvd24uanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwic3R5bGVkIiwiUHJvcFR5cGVzIiwidXNlT3V0Q2xpY2siLCJkZWZhdWx0VGhlbWUiLCJJY29uIiwiRHJvcGRvd25MaXN0IiwiRHJvcGRvd25IZWFkZXJUaXRsZSIsIkljb25BcnJvdyIsImNzc19kcm9wZG93bmJhc2UiLCJEcm9wZG93bkNvbXBvbmVudCIsInZhbHVlQ2hhbmdlIiwidGl0bGUiLCJjaGlsZHJlbiIsInN0YXR1cyIsImNsYXNzTmFtZSIsIm5vZGUiLCJsaXN0T3BlbiIsInNldExpc3RPcGVuIiwiaGVhZGVyVGl0bGUiLCJzZXRIZWFkZXJUaXRsZSIsInNlbGVjdGVkSUQiLCJzZXRTZWxlY3RlZElEIiwiY2IiLCJzZWxlY3RJdGVtIiwiaWQiLCJsaXN0SXRlbXMiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwibWFwIiwiY2hpbGQiLCJpIiwiaXRlbSIsImN1cnJlbnRTZWxlY3Rpb24iLCJwcm9wcyIsIm9uSXRlbUNsaWNrIiwiaWNvblN0eWxlIiwiRHJvcGRvd24iLCJkZWZhdWx0UHJvcHMiLCJ0aGVtZSIsImJhc2UiLCJwcm9wVHlwZXMiLCJvbmVPZiJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQVAsSUFDQ0MsUUFERCxFQUNXQyxTQURYLEVBQ3NCQyxRQUR0QixFQUNnQ0MsWUFEaEMsRUFDOENDLFdBRDlDLEVBQzJEQyxNQUQzRCxRQUVPLE9BRlA7QUFHQSxPQUFPQyxNQUFQLE1BQW1CLG1CQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLHNCQUF4QjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsY0FBN0I7QUFDQSxTQUFTQyxJQUFULFFBQXFCLFNBQXJCO0FBRUEs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LEVBQUFBLEtBQUssRUFBRW5DLFlBQVksQ0FBQ29DO0FBREcsQ0FBeEI7QUFJQTs7QUFDQUgsUUFBUSxDQUFDSSxTQUFULEdBQXFCO0FBQ3BCNUIsRUFBQUEsUUFBUSxFQUFFWCxTQUFTLENBQUN3QyxLQUFWLENBQWdCLENBQ3pCeEMsU0FBUyxDQUFDYyxJQURlLENBQWhCO0FBRFUsQ0FBckI7QUFNQSxlQUFlcUIsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuXHR1c2VTdGF0ZSwgdXNlRWZmZWN0LCBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB1c2VPdXRDbGljayBmcm9tIFwiLi4vaG9va3MvdXNlT3V0Q2xpY2tcIjtcbmltcG9ydCB7IGRlZmF1bHRUaGVtZSB9IGZyb20gXCIuLi91aS90aGVtZXNcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vaWNvblwiO1xuXG5pbXBvcnQge1xuXHREcm9wZG93bkxpc3QsXG5cdERyb3Bkb3duSGVhZGVyVGl0bGUsXG5cdEljb25BcnJvdyxcblx0Y3NzX2Ryb3Bkb3duYmFzZVxufSBmcm9tIFwiLi9zdHlsZXNcIjtcblxuLyoqIE9uY2UgZHJvcGRvd24gc3R5bGluZyBpcyBkb25lOlxuICogVE9ETzogdXBkYXRlIGRlZmF1bHRQcm9wcyBhbmQgUHJvcFR5cGVzXG4gKi9cblxuXG5jb25zdCBEcm9wZG93bkNvbXBvbmVudCA9ICh7XG5cdHZhbHVlQ2hhbmdlLFxuXHR0aXRsZSxcblx0Y2hpbGRyZW4sXG5cdHN0YXR1cyxcblx0Y2xhc3NOYW1lLFxufSkgPT4ge1xuXHRjb25zdCBub2RlID0gdXNlUmVmKCk7XG5cdGNvbnN0IFtsaXN0T3Blbiwgc2V0TGlzdE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXHRjb25zdCBbaGVhZGVyVGl0bGUsIHNldEhlYWRlclRpdGxlXSA9IHVzZVN0YXRlKHRpdGxlKTtcblx0Y29uc3QgW3NlbGVjdGVkSUQsIHNldFNlbGVjdGVkSURdID0gdXNlU3RhdGUoXCItMVwiKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmICh2YWx1ZUNoYW5nZSkgdmFsdWVDaGFuZ2Uoc2VsZWN0ZWRJRCk7XG5cdH0sIFtzZWxlY3RlZElELCB2YWx1ZUNoYW5nZV0pO1xuXG5cdGNvbnN0IGNiID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuXHRcdHNldExpc3RPcGVuKGZhbHNlKTtcblx0fSwgW10pO1xuXG5cdHVzZU91dENsaWNrKGNiLCBub2RlKTtcblxuXHRmdW5jdGlvbiBzZWxlY3RJdGVtKHRpdGxlLCBpZCkge1xuXHRcdHNldEhlYWRlclRpdGxlKHRpdGxlKTtcblx0XHRzZXRMaXN0T3BlbihmYWxzZSk7XG5cdFx0c2V0U2VsZWN0ZWRJRChpZCk7XG5cdH1cblxuXHRjb25zdCBsaXN0SXRlbXMgPSAoXG5cdFx0PERyb3Bkb3duTGlzdCBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxuXHRcdFx0e0NoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpKSA9PiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcblx0XHRcdFx0aXRlbTogaSxcblx0XHRcdFx0Y3VycmVudFNlbGVjdGlvbjogKGhlYWRlclRpdGxlID09PSBjaGlsZC5wcm9wcy5jaGlsZHJlbiksXG5cdFx0XHRcdG9uSXRlbUNsaWNrOiBzZWxlY3RJdGVtLFxuXHRcdFx0XHRzdGF0dXMsXG5cdFx0XHR9KSl9XG5cdFx0PC9Ecm9wZG93bkxpc3Q+XG5cdCk7XG5cblx0Y29uc3QgaWNvblN0eWxlID0gbGlzdE9wZW4gPyBcImNoZXZyb24tdXBcIiA6IFwiY2hldnJvbi1kb3duXCI7XG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB0YWJJbmRleD1cIjFcIiByZWY9e25vZGV9IG9uQ2xpY2s9e2UgPT4gc2V0TGlzdE9wZW4oIWxpc3RPcGVuKX0+XG5cdFx0XHQ8RHJvcGRvd25IZWFkZXJUaXRsZT57aGVhZGVyVGl0bGV9PC9Ecm9wZG93bkhlYWRlclRpdGxlPlxuXHRcdFx0PEljb25BcnJvdz48SWNvbiBpY29uPXtpY29uU3R5bGV9Lz48L0ljb25BcnJvdz5cblx0XHRcdHtsaXN0T3BlbiAmJiBsaXN0SXRlbXN9XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5jb25zdCBEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bkNvbXBvbmVudClgXG5cdCR7Y3NzX2Ryb3Bkb3duYmFzZX1cbmA7XG5cbi8qKiBEZWZhdWx0ICovXG5Ecm9wZG93bi5kZWZhdWx0UHJvcHMgPSB7XG5cdHRoZW1lOiBkZWZhdWx0VGhlbWUuYmFzZVxufTtcblxuLyoqIFByb3BzICovXG5Ecm9wZG93bi5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2YoW1xuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiJdfQ==