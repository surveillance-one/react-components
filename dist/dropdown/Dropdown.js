import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

/* eslint-disable object-curly-newline */
import React, { useState, Children, cloneElement, useRef } from "react";
import useOutClick from "../hooks/useOutClick";
import useValueChange from "../hooks/useValueChange";
import { Button } from "../button";
import { DropdownContainer, DropdownListMenu, DropdownListContent } from "./styles";

var Dropdown = function Dropdown(_ref) {
  var valueChange = _ref.valueChange,
      title = _ref.title,
      children = _ref.children,
      status = _ref.status,
      _ref$iconBg = _ref.iconBg,
      iconBg = _ref$iconBg === void 0 ? true : _ref$iconBg,
      _ref$iconPosition = _ref.iconPosition,
      iconPosition = _ref$iconPosition === void 0 ? "right" : _ref$iconPosition;
  var node = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      listOpen = _useState2[0],
      setListOpen = _useState2[1];

  var _useState3 = useState(title),
      _useState4 = _slicedToArray(_useState3, 2),
      headerTitle = _useState4[0],
      setHeaderTitle = _useState4[1];

  var _useState5 = useState("-1"),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedID = _useState6[0],
      setSelectedID = _useState6[1];

  useValueChange(valueChange, selectedID);
  console.log("fired");
  useOutClick(setListOpen, node);

  var selectItem = function selectItem(title, id) {
    setHeaderTitle(title);
    setListOpen(false);
    setSelectedID(id);
  };

  return React.createElement(DropdownContainer, {
    tabIndex: "1",
    ref: node,
    onClick: function onClick(e) {
      return setListOpen(!listOpen);
    }
  }, React.createElement(Button, {
    iconBg: iconBg,
    iconPosition: iconPosition,
    iconName: "angle-down"
  }, headerTitle), listOpen && React.createElement(DropdownListMenu, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, React.createElement(DropdownListContent, null, Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      currentSelection: headerTitle === child.props.children,
      onItemClick: selectItem,
      status: status
    });
  }))));
};
/** Props */


export default Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJvcGRvd24vRHJvcGRvd24uanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZVJlZiIsInVzZU91dENsaWNrIiwidXNlVmFsdWVDaGFuZ2UiLCJCdXR0b24iLCJEcm9wZG93bkNvbnRhaW5lciIsIkRyb3Bkb3duTGlzdE1lbnUiLCJEcm9wZG93bkxpc3RDb250ZW50IiwiRHJvcGRvd24iLCJ2YWx1ZUNoYW5nZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJzdGF0dXMiLCJpY29uQmciLCJpY29uUG9zaXRpb24iLCJub2RlIiwibGlzdE9wZW4iLCJzZXRMaXN0T3BlbiIsImhlYWRlclRpdGxlIiwic2V0SGVhZGVyVGl0bGUiLCJzZWxlY3RlZElEIiwic2V0U2VsZWN0ZWRJRCIsImNvbnNvbGUiLCJsb2ciLCJzZWxlY3RJdGVtIiwiaWQiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwibWFwIiwiY2hpbGQiLCJpIiwiaXRlbSIsImN1cnJlbnRTZWxlY3Rpb24iLCJwcm9wcyIsIm9uSXRlbUNsaWNrIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsT0FBT0EsS0FBUCxJQUFnQkMsUUFBaEIsRUFBMEJDLFFBQTFCLEVBQW9DQyxZQUFwQyxFQUFrREMsTUFBbEQsUUFBZ0UsT0FBaEU7QUFHQSxPQUFPQyxXQUFQLE1BQXdCLHNCQUF4QjtBQUNBLE9BQU9DLGNBQVAsTUFBMkIseUJBQTNCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixXQUF2QjtBQUVBLFNBQVNDLGlCQUFULEVBQTRCQyxnQkFBNUIsRUFBOENDLG1CQUE5QyxRQUF5RSxVQUF6RTs7QUFFQSxJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxPQU9YO0FBQUEsTUFOTEMsV0FNSyxRQU5MQSxXQU1LO0FBQUEsTUFMTEMsS0FLSyxRQUxMQSxLQUtLO0FBQUEsTUFKTEMsUUFJSyxRQUpMQSxRQUlLO0FBQUEsTUFITEMsTUFHSyxRQUhMQSxNQUdLO0FBQUEseUJBRkxDLE1BRUs7QUFBQSxNQUZMQSxNQUVLLDRCQUZJLElBRUo7QUFBQSwrQkFETEMsWUFDSztBQUFBLE1BRExBLFlBQ0ssa0NBRFUsT0FDVjtBQUNMLE1BQU1DLElBQUksR0FBR2QsTUFBTSxFQUFuQjs7QUFESyxrQkFFMkJILFFBQVEsQ0FBQyxLQUFELENBRm5DO0FBQUE7QUFBQSxNQUVFa0IsUUFGRjtBQUFBLE1BRVlDLFdBRlo7O0FBQUEsbUJBR2lDbkIsUUFBUSxDQUFDWSxLQUFELENBSHpDO0FBQUE7QUFBQSxNQUdFUSxXQUhGO0FBQUEsTUFHZUMsY0FIZjs7QUFBQSxtQkFJK0JyQixRQUFRLENBQUMsSUFBRCxDQUp2QztBQUFBO0FBQUEsTUFJRXNCLFVBSkY7QUFBQSxNQUljQyxhQUpkOztBQU1MbEIsRUFBQUEsY0FBYyxDQUFDTSxXQUFELEVBQWNXLFVBQWQsQ0FBZDtBQUNBRSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FyQixFQUFBQSxXQUFXLENBQUNlLFdBQUQsRUFBY0YsSUFBZCxDQUFYOztBQUVBLE1BQU1TLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNkLEtBQUQsRUFBUWUsRUFBUixFQUFlO0FBQ2pDTixJQUFBQSxjQUFjLENBQUNULEtBQUQsQ0FBZDtBQUNBTyxJQUFBQSxXQUFXLENBQUMsS0FBRCxDQUFYO0FBQ0FJLElBQUFBLGFBQWEsQ0FBQ0ksRUFBRCxDQUFiO0FBQ0EsR0FKRDs7QUFNQSxTQUNDLG9CQUFDLGlCQUFEO0FBQW1CLElBQUEsUUFBUSxFQUFDLEdBQTVCO0FBQWdDLElBQUEsR0FBRyxFQUFFVixJQUFyQztBQUEyQyxJQUFBLE9BQU8sRUFBRSxpQkFBQVcsQ0FBQztBQUFBLGFBQUlULFdBQVcsQ0FBQyxDQUFDRCxRQUFGLENBQWY7QUFBQTtBQUFyRCxLQUNDLG9CQUFDLE1BQUQ7QUFBUSxJQUFBLE1BQU0sRUFBRUgsTUFBaEI7QUFBd0IsSUFBQSxZQUFZLEVBQUVDLFlBQXRDO0FBQW9ELElBQUEsUUFBUSxFQUFDO0FBQTdELEtBQTJFSSxXQUEzRSxDQURELEVBRUVGLFFBQVEsSUFDUixvQkFBQyxnQkFBRDtBQUFrQixJQUFBLE9BQU8sRUFBRSxpQkFBQVUsQ0FBQztBQUFBLGFBQUlBLENBQUMsQ0FBQ0MsZUFBRixFQUFKO0FBQUE7QUFBNUIsS0FDQyxvQkFBQyxtQkFBRCxRQUNFNUIsUUFBUSxDQUFDNkIsR0FBVCxDQUFhakIsUUFBYixFQUF1QixVQUFDa0IsS0FBRCxFQUFRQyxDQUFSO0FBQUEsV0FBYzlCLFlBQVksQ0FBQzZCLEtBQUQsRUFBUTtBQUN6REUsTUFBQUEsSUFBSSxFQUFFRCxDQURtRDtBQUV6REUsTUFBQUEsZ0JBQWdCLEVBQUdkLFdBQVcsS0FBS1csS0FBSyxDQUFDSSxLQUFOLENBQVl0QixRQUZVO0FBR3pEdUIsTUFBQUEsV0FBVyxFQUFFVixVQUg0QztBQUl6RFosTUFBQUEsTUFBTSxFQUFOQTtBQUp5RCxLQUFSLENBQTFCO0FBQUEsR0FBdkIsQ0FERixDQURELENBSEYsQ0FERDtBQWlCQSxDQXhDRDtBQTBDQTs7O0FBT0EsZUFBZUosUUFBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG9iamVjdC1jdXJseS1uZXdsaW5lICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgdXNlT3V0Q2xpY2sgZnJvbSBcIi4uL2hvb2tzL3VzZU91dENsaWNrXCI7XG5pbXBvcnQgdXNlVmFsdWVDaGFuZ2UgZnJvbSBcIi4uL2hvb2tzL3VzZVZhbHVlQ2hhbmdlXCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vYnV0dG9uXCI7XG5cbmltcG9ydCB7IERyb3Bkb3duQ29udGFpbmVyLCBEcm9wZG93bkxpc3RNZW51LCBEcm9wZG93bkxpc3RDb250ZW50IH0gZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmNvbnN0IERyb3Bkb3duID0gKHtcblx0dmFsdWVDaGFuZ2UsXG5cdHRpdGxlLFxuXHRjaGlsZHJlbixcblx0c3RhdHVzLFxuXHRpY29uQmcgPSB0cnVlLFxuXHRpY29uUG9zaXRpb24gPSBcInJpZ2h0XCJcbn0pID0+IHtcblx0Y29uc3Qgbm9kZSA9IHVzZVJlZigpO1xuXHRjb25zdCBbbGlzdE9wZW4sIHNldExpc3RPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcblx0Y29uc3QgW2hlYWRlclRpdGxlLCBzZXRIZWFkZXJUaXRsZV0gPSB1c2VTdGF0ZSh0aXRsZSk7XG5cdGNvbnN0IFtzZWxlY3RlZElELCBzZXRTZWxlY3RlZElEXSA9IHVzZVN0YXRlKFwiLTFcIik7XG5cblx0dXNlVmFsdWVDaGFuZ2UodmFsdWVDaGFuZ2UsIHNlbGVjdGVkSUQpO1xuXHRjb25zb2xlLmxvZyhcImZpcmVkXCIpO1xuXHR1c2VPdXRDbGljayhzZXRMaXN0T3Blbiwgbm9kZSk7XG5cblx0Y29uc3Qgc2VsZWN0SXRlbSA9ICh0aXRsZSwgaWQpID0+IHtcblx0XHRzZXRIZWFkZXJUaXRsZSh0aXRsZSk7XG5cdFx0c2V0TGlzdE9wZW4oZmFsc2UpO1xuXHRcdHNldFNlbGVjdGVkSUQoaWQpO1xuXHR9O1xuXG5cdHJldHVybiAoXG5cdFx0PERyb3Bkb3duQ29udGFpbmVyIHRhYkluZGV4PVwiMVwiIHJlZj17bm9kZX0gb25DbGljaz17ZSA9PiBzZXRMaXN0T3BlbighbGlzdE9wZW4pfT5cblx0XHRcdDxCdXR0b24gaWNvbkJnPXtpY29uQmd9IGljb25Qb3NpdGlvbj17aWNvblBvc2l0aW9ufSBpY29uTmFtZT1cImFuZ2xlLWRvd25cIj57aGVhZGVyVGl0bGV9PC9CdXR0b24+XG5cdFx0XHR7bGlzdE9wZW4gJiZcblx0XHRcdFx0PERyb3Bkb3duTGlzdE1lbnUgb25DbGljaz17ZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfT5cblx0XHRcdFx0XHQ8RHJvcGRvd25MaXN0Q29udGVudD5cblx0XHRcdFx0XHRcdHtDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaSkgPT4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG5cdFx0XHRcdFx0XHRcdGl0ZW06IGksXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRTZWxlY3Rpb246IChoZWFkZXJUaXRsZSA9PT0gY2hpbGQucHJvcHMuY2hpbGRyZW4pLFxuXHRcdFx0XHRcdFx0XHRvbkl0ZW1DbGljazogc2VsZWN0SXRlbSxcblx0XHRcdFx0XHRcdFx0c3RhdHVzLFxuXHRcdFx0XHRcdFx0fSkpfVxuXHRcdFx0XHRcdDwvRHJvcGRvd25MaXN0Q29udGVudD5cblx0XHRcdFx0PC9Ecm9wZG93bkxpc3RNZW51PlxuXHRcdFx0fVxuXHRcdDwvRHJvcGRvd25Db250YWluZXI+XG5cdCk7XG59O1xuXG4vKiogUHJvcHMgKi9cbkRyb3Bkb3duLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZihbXG5cdFx0UHJvcFR5cGVzLm5vZGVcblx0XSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIl19