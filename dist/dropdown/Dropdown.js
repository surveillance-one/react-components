import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect, Children, cloneElement, useCallback, useRef } from "react";
import styled from "styled-components";
import { useOutsideClick } from "hooks";
import { Icon } from "components";
import PropTypes from "prop-types";
import { defaultTheme } from "ui/themes";
import * as sc from "./styles";

var DropdownComponent = function DropdownComponent(_ref) {
  var valueChange = _ref.valueChange,
      title = _ref.title,
      children = _ref.children,
      status = _ref.status,
      className = _ref.className;
  var node = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      listOpen = _useState2[0],
      setListOpen = _useState2[1];

  var _useState3 = useState(title),
      _useState4 = _slicedToArray(_useState3, 2),
      headerTitle = _useState4[0],
      setHeaderTitle = _useState4[1];

  var _useState5 = useState("-1"),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedID = _useState6[0],
      setSelectedID = _useState6[1];

  useEffect(function () {
    if (valueChange) valueChange(selectedID);
  }, [selectedID, valueChange]);
  var cb = useCallback(function () {
    setListOpen(false);
  }, []);
  useOutsideClick(cb, node);

  function selectItem(title, id) {
    setHeaderTitle(title);
    setListOpen(false);
    setSelectedID(id);
  }

  var listItems = React.createElement(sc.DropdownList, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      currentSelection: headerTitle === child.props.children,
      onItemClick: selectItem,
      status: status
    });
  }));
  var iconStyle = listOpen ? "chevron-up" : "chevron-down";
  return React.createElement("div", {
    className: className,
    tabIndex: "1",
    ref: node,
    onClick: function onClick(e) {
      return setListOpen(!listOpen);
    }
  }, React.createElement(sc.DropdownHeaderTitle, null, headerTitle), React.createElement(sc.IconArrow, null, React.createElement(Icon, {
    icon: iconStyle
  })), listOpen && listItems);
};

var Dropdown = styled(DropdownComponent).withConfig({
  displayName: "Dropdown",
  componentId: "sc-2m7s6m-0"
})(["", ""], sc.css_dropdownbase);
/** Default */

Dropdown.defaultProps = {
  theme: defaultTheme.base
};
/** Props */

Dropdown.propTypes = {
  children: PropTypes.oneOf([PropTypes.node])
};
export default Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJvcGRvd24vRHJvcGRvd24uanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwic3R5bGVkIiwidXNlT3V0c2lkZUNsaWNrIiwiSWNvbiIsIlByb3BUeXBlcyIsImRlZmF1bHRUaGVtZSIsInNjIiwiRHJvcGRvd25Db21wb25lbnQiLCJ2YWx1ZUNoYW5nZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJzdGF0dXMiLCJjbGFzc05hbWUiLCJub2RlIiwibGlzdE9wZW4iLCJzZXRMaXN0T3BlbiIsImhlYWRlclRpdGxlIiwic2V0SGVhZGVyVGl0bGUiLCJzZWxlY3RlZElEIiwic2V0U2VsZWN0ZWRJRCIsImNiIiwic2VsZWN0SXRlbSIsImlkIiwibGlzdEl0ZW1zIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsIm1hcCIsImNoaWxkIiwiaSIsIml0ZW0iLCJjdXJyZW50U2VsZWN0aW9uIiwicHJvcHMiLCJvbkl0ZW1DbGljayIsImljb25TdHlsZSIsIkRyb3Bkb3duIiwiY3NzX2Ryb3Bkb3duYmFzZSIsImRlZmF1bHRQcm9wcyIsInRoZW1lIiwiYmFzZSIsInByb3BUeXBlcyIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxJQUNDQyxRQURELEVBQ1dDLFNBRFgsRUFDc0JDLFFBRHRCLEVBQ2dDQyxZQURoQyxFQUM4Q0MsV0FEOUMsRUFDMkRDLE1BRDNELFFBRU8sT0FGUDtBQUdBLE9BQU9DLE1BQVAsTUFBbUIsbUJBQW5CO0FBQ0EsU0FBU0MsZUFBVCxRQUFnQyxPQUFoQztBQUNBLFNBQVNDLElBQVQsUUFBcUIsWUFBckI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixXQUE3QjtBQUNBLE9BQU8sS0FBS0MsRUFBWixNQUFvQixVQUFwQjs7QUFFQSxJQUFNQyxp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Q0FBeEI7QUFJQTs7QUFDQUosUUFBUSxDQUFDSyxTQUFULEdBQXFCO0FBQ3BCN0IsRUFBQUEsUUFBUSxFQUFFTixTQUFTLENBQUNvQyxLQUFWLENBQWdCLENBQ3pCcEMsU0FBUyxDQUFDUyxJQURlLENBQWhCO0FBRFUsQ0FBckI7QUFNQSxlQUFlcUIsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuXHR1c2VTdGF0ZSwgdXNlRWZmZWN0LCBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IHVzZU91dHNpZGVDbGljayB9IGZyb20gXCJob29rc1wiO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gXCJjb21wb25lbnRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tIFwidWkvdGhlbWVzXCI7XG5pbXBvcnQgKiBhcyBzYyBmcm9tIFwiLi9zdHlsZXNcIjtcblxuY29uc3QgRHJvcGRvd25Db21wb25lbnQgPSAoe1xuXHR2YWx1ZUNoYW5nZSxcblx0dGl0bGUsXG5cdGNoaWxkcmVuLFxuXHRzdGF0dXMsXG5cdGNsYXNzTmFtZSxcbn0pID0+IHtcblx0Y29uc3Qgbm9kZSA9IHVzZVJlZigpO1xuXHRjb25zdCBbbGlzdE9wZW4sIHNldExpc3RPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcblx0Y29uc3QgW2hlYWRlclRpdGxlLCBzZXRIZWFkZXJUaXRsZV0gPSB1c2VTdGF0ZSh0aXRsZSk7XG5cdGNvbnN0IFtzZWxlY3RlZElELCBzZXRTZWxlY3RlZElEXSA9IHVzZVN0YXRlKFwiLTFcIik7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAodmFsdWVDaGFuZ2UpIHZhbHVlQ2hhbmdlKHNlbGVjdGVkSUQpO1xuXHR9LCBbc2VsZWN0ZWRJRCwgdmFsdWVDaGFuZ2VdKTtcblxuXHRjb25zdCBjYiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcblx0XHRzZXRMaXN0T3BlbihmYWxzZSk7XG5cdH0sIFtdKTtcblxuXHR1c2VPdXRzaWRlQ2xpY2soY2IsIG5vZGUpO1xuXG5cdGZ1bmN0aW9uIHNlbGVjdEl0ZW0odGl0bGUsIGlkKSB7XG5cdFx0c2V0SGVhZGVyVGl0bGUodGl0bGUpO1xuXHRcdHNldExpc3RPcGVuKGZhbHNlKTtcblx0XHRzZXRTZWxlY3RlZElEKGlkKTtcblx0fVxuXG5cdGNvbnN0IGxpc3RJdGVtcyA9IChcblx0XHQ8c2MuRHJvcGRvd25MaXN0IG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG5cdFx0XHR7Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IGNsb25lRWxlbWVudChjaGlsZCwge1xuXHRcdFx0XHRpdGVtOiBpLFxuXHRcdFx0XHRjdXJyZW50U2VsZWN0aW9uOiAoaGVhZGVyVGl0bGUgPT09IGNoaWxkLnByb3BzLmNoaWxkcmVuKSxcblx0XHRcdFx0b25JdGVtQ2xpY2s6IHNlbGVjdEl0ZW0sXG5cdFx0XHRcdHN0YXR1cyxcblx0XHRcdH0pKX1cblx0XHQ8L3NjLkRyb3Bkb3duTGlzdD5cblx0KTtcblxuXHRjb25zdCBpY29uU3R5bGUgPSBsaXN0T3BlbiA/IFwiY2hldnJvbi11cFwiIDogXCJjaGV2cm9uLWRvd25cIjtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHRhYkluZGV4PVwiMVwiIHJlZj17bm9kZX0gb25DbGljaz17ZSA9PiBzZXRMaXN0T3BlbighbGlzdE9wZW4pfT5cblx0XHRcdDxzYy5Ecm9wZG93bkhlYWRlclRpdGxlPntoZWFkZXJUaXRsZX08L3NjLkRyb3Bkb3duSGVhZGVyVGl0bGU+XG5cdFx0XHQ8c2MuSWNvbkFycm93PjxJY29uIGljb249e2ljb25TdHlsZX0vPjwvc2MuSWNvbkFycm93PlxuXHRcdFx0e2xpc3RPcGVuICYmIGxpc3RJdGVtc31cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmNvbnN0IERyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duQ29tcG9uZW50KWBcblx0JHtzYy5jc3NfZHJvcGRvd25iYXNlfVxuYDtcblxuLyoqIERlZmF1bHQgKi9cbkRyb3Bkb3duLmRlZmF1bHRQcm9wcyA9IHtcblx0dGhlbWU6IGRlZmF1bHRUaGVtZS5iYXNlXG59O1xuXG4vKiogUHJvcHMgKi9cbkRyb3Bkb3duLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZihbXG5cdFx0UHJvcFR5cGVzLm5vZGVcblx0XSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIl19