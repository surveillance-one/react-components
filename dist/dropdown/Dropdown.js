import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

/* eslint-disable object-curly-newline */
import React, { useState, Children, cloneElement, useRef } from "react";
import useOutClick from "../hooks/useOutClick";
import useValueChange from "../hooks/useValueChange";
import { Button } from "../button";
import { DropdownContainer, DropdownListMenu, DropdownListContent } from "./styles";

var Dropdown = function Dropdown(_ref) {
  var valueChange = _ref.valueChange,
      title = _ref.title,
      children = _ref.children,
      status = _ref.status,
      _ref$iconBg = _ref.iconBg,
      iconBg = _ref$iconBg === void 0 ? true : _ref$iconBg;
  var node = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      listOpen = _useState2[0],
      setListOpen = _useState2[1];

  var _useState3 = useState(title),
      _useState4 = _slicedToArray(_useState3, 2),
      headerTitle = _useState4[0],
      setHeaderTitle = _useState4[1];

  var _useState5 = useState("-1"),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedID = _useState6[0],
      setSelectedID = _useState6[1];

  useValueChange(valueChange, selectedID);
  useOutClick(setListOpen, node);

  var selectItem = function selectItem(title, id) {
    setHeaderTitle(title);
    setListOpen(false);
    setSelectedID(id);
  };

  return React.createElement(DropdownContainer, {
    tabIndex: "1",
    ref: node,
    onClick: function onClick(e) {
      return setListOpen(!listOpen);
    }
  }, React.createElement(Button, {
    iconBg: iconBg,
    iconName: "angle-down"
  }, headerTitle), listOpen && React.createElement(DropdownListMenu, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, React.createElement(DropdownListContent, null, Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      currentSelection: headerTitle === child.props.children,
      onItemClick: selectItem,
      status: status
    });
  }))));
};
/** Props */


export default Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJvcGRvd24vRHJvcGRvd24uanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZVJlZiIsInVzZU91dENsaWNrIiwidXNlVmFsdWVDaGFuZ2UiLCJCdXR0b24iLCJEcm9wZG93bkNvbnRhaW5lciIsIkRyb3Bkb3duTGlzdE1lbnUiLCJEcm9wZG93bkxpc3RDb250ZW50IiwiRHJvcGRvd24iLCJ2YWx1ZUNoYW5nZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJzdGF0dXMiLCJpY29uQmciLCJub2RlIiwibGlzdE9wZW4iLCJzZXRMaXN0T3BlbiIsImhlYWRlclRpdGxlIiwic2V0SGVhZGVyVGl0bGUiLCJzZWxlY3RlZElEIiwic2V0U2VsZWN0ZWRJRCIsInNlbGVjdEl0ZW0iLCJpZCIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJtYXAiLCJjaGlsZCIsImkiLCJpdGVtIiwiY3VycmVudFNlbGVjdGlvbiIsInByb3BzIiwib25JdGVtQ2xpY2siXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxPQUFPQSxLQUFQLElBQWdCQyxRQUFoQixFQUEwQkMsUUFBMUIsRUFBb0NDLFlBQXBDLEVBQWtEQyxNQUFsRCxRQUFnRSxPQUFoRTtBQUdBLE9BQU9DLFdBQVAsTUFBd0Isc0JBQXhCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix5QkFBM0I7QUFDQSxTQUFTQyxNQUFULFFBQXVCLFdBQXZCO0FBRUEsU0FBU0MsaUJBQVQsRUFBNEJDLGdCQUE1QixFQUE4Q0MsbUJBQTlDLFFBQXlFLFVBQXpFOztBQUVBLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLE9BQTZEO0FBQUEsTUFBMURDLFdBQTBELFFBQTFEQSxXQUEwRDtBQUFBLE1BQTdDQyxLQUE2QyxRQUE3Q0EsS0FBNkM7QUFBQSxNQUF0Q0MsUUFBc0MsUUFBdENBLFFBQXNDO0FBQUEsTUFBNUJDLE1BQTRCLFFBQTVCQSxNQUE0QjtBQUFBLHlCQUFwQkMsTUFBb0I7QUFBQSxNQUFwQkEsTUFBb0IsNEJBQVgsSUFBVztBQUM3RSxNQUFNQyxJQUFJLEdBQUdiLE1BQU0sRUFBbkI7O0FBRDZFLGtCQUU3Q0gsUUFBUSxDQUFDLEtBQUQsQ0FGcUM7QUFBQTtBQUFBLE1BRXRFaUIsUUFGc0U7QUFBQSxNQUU1REMsV0FGNEQ7O0FBQUEsbUJBR3ZDbEIsUUFBUSxDQUFDWSxLQUFELENBSCtCO0FBQUE7QUFBQSxNQUd0RU8sV0FIc0U7QUFBQSxNQUd6REMsY0FIeUQ7O0FBQUEsbUJBSXpDcEIsUUFBUSxDQUFDLElBQUQsQ0FKaUM7QUFBQTtBQUFBLE1BSXRFcUIsVUFKc0U7QUFBQSxNQUkxREMsYUFKMEQ7O0FBTTdFakIsRUFBQUEsY0FBYyxDQUFDTSxXQUFELEVBQWNVLFVBQWQsQ0FBZDtBQUNBakIsRUFBQUEsV0FBVyxDQUFDYyxXQUFELEVBQWNGLElBQWQsQ0FBWDs7QUFFQSxNQUFNTyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDWCxLQUFELEVBQVFZLEVBQVIsRUFBZTtBQUNqQ0osSUFBQUEsY0FBYyxDQUFDUixLQUFELENBQWQ7QUFDQU0sSUFBQUEsV0FBVyxDQUFDLEtBQUQsQ0FBWDtBQUNBSSxJQUFBQSxhQUFhLENBQUNFLEVBQUQsQ0FBYjtBQUNBLEdBSkQ7O0FBTUEsU0FDQyxvQkFBQyxpQkFBRDtBQUFtQixJQUFBLFFBQVEsRUFBQyxHQUE1QjtBQUFnQyxJQUFBLEdBQUcsRUFBRVIsSUFBckM7QUFBMkMsSUFBQSxPQUFPLEVBQUUsaUJBQUFTLENBQUM7QUFBQSxhQUFJUCxXQUFXLENBQUMsQ0FBQ0QsUUFBRixDQUFmO0FBQUE7QUFBckQsS0FDQyxvQkFBQyxNQUFEO0FBQVEsSUFBQSxNQUFNLEVBQUVGLE1BQWhCO0FBQXdCLElBQUEsUUFBUSxFQUFDO0FBQWpDLEtBQStDSSxXQUEvQyxDQURELEVBRUVGLFFBQVEsSUFDUixvQkFBQyxnQkFBRDtBQUFrQixJQUFBLE9BQU8sRUFBRSxpQkFBQVEsQ0FBQztBQUFBLGFBQUlBLENBQUMsQ0FBQ0MsZUFBRixFQUFKO0FBQUE7QUFBNUIsS0FDQyxvQkFBQyxtQkFBRCxRQUNFekIsUUFBUSxDQUFDMEIsR0FBVCxDQUFhZCxRQUFiLEVBQXVCLFVBQUNlLEtBQUQsRUFBUUMsQ0FBUjtBQUFBLFdBQWMzQixZQUFZLENBQUMwQixLQUFELEVBQVE7QUFDekRFLE1BQUFBLElBQUksRUFBRUQsQ0FEbUQ7QUFFekRFLE1BQUFBLGdCQUFnQixFQUFHWixXQUFXLEtBQUtTLEtBQUssQ0FBQ0ksS0FBTixDQUFZbkIsUUFGVTtBQUd6RG9CLE1BQUFBLFdBQVcsRUFBRVYsVUFINEM7QUFJekRULE1BQUFBLE1BQU0sRUFBTkE7QUFKeUQsS0FBUixDQUExQjtBQUFBLEdBQXZCLENBREYsQ0FERCxDQUhGLENBREQ7QUFpQkEsQ0FoQ0Q7QUFrQ0E7OztBQU9BLGVBQWVKLFFBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBvYmplY3QtY3VybHktbmV3bGluZSAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHVzZU91dENsaWNrIGZyb20gXCIuLi9ob29rcy91c2VPdXRDbGlja1wiO1xuaW1wb3J0IHVzZVZhbHVlQ2hhbmdlIGZyb20gXCIuLi9ob29rcy91c2VWYWx1ZUNoYW5nZVwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4uL2J1dHRvblwiO1xuXG5pbXBvcnQgeyBEcm9wZG93bkNvbnRhaW5lciwgRHJvcGRvd25MaXN0TWVudSwgRHJvcGRvd25MaXN0Q29udGVudCB9IGZyb20gXCIuL3N0eWxlc1wiO1xuXG5jb25zdCBEcm9wZG93biA9ICh7IHZhbHVlQ2hhbmdlLCB0aXRsZSwgY2hpbGRyZW4sIHN0YXR1cywgaWNvbkJnID0gdHJ1ZSB9KSA9PiB7XG5cdGNvbnN0IG5vZGUgPSB1c2VSZWYoKTtcblx0Y29uc3QgW2xpc3RPcGVuLCBzZXRMaXN0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cdGNvbnN0IFtoZWFkZXJUaXRsZSwgc2V0SGVhZGVyVGl0bGVdID0gdXNlU3RhdGUodGl0bGUpO1xuXHRjb25zdCBbc2VsZWN0ZWRJRCwgc2V0U2VsZWN0ZWRJRF0gPSB1c2VTdGF0ZShcIi0xXCIpO1xuXG5cdHVzZVZhbHVlQ2hhbmdlKHZhbHVlQ2hhbmdlLCBzZWxlY3RlZElEKTtcblx0dXNlT3V0Q2xpY2soc2V0TGlzdE9wZW4sIG5vZGUpO1xuXG5cdGNvbnN0IHNlbGVjdEl0ZW0gPSAodGl0bGUsIGlkKSA9PiB7XG5cdFx0c2V0SGVhZGVyVGl0bGUodGl0bGUpO1xuXHRcdHNldExpc3RPcGVuKGZhbHNlKTtcblx0XHRzZXRTZWxlY3RlZElEKGlkKTtcblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxEcm9wZG93bkNvbnRhaW5lciB0YWJJbmRleD1cIjFcIiByZWY9e25vZGV9IG9uQ2xpY2s9e2UgPT4gc2V0TGlzdE9wZW4oIWxpc3RPcGVuKX0+XG5cdFx0XHQ8QnV0dG9uIGljb25CZz17aWNvbkJnfSBpY29uTmFtZT1cImFuZ2xlLWRvd25cIj57aGVhZGVyVGl0bGV9PC9CdXR0b24+XG5cdFx0XHR7bGlzdE9wZW4gJiZcblx0XHRcdFx0PERyb3Bkb3duTGlzdE1lbnUgb25DbGljaz17ZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfT5cblx0XHRcdFx0XHQ8RHJvcGRvd25MaXN0Q29udGVudD5cblx0XHRcdFx0XHRcdHtDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaSkgPT4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG5cdFx0XHRcdFx0XHRcdGl0ZW06IGksXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRTZWxlY3Rpb246IChoZWFkZXJUaXRsZSA9PT0gY2hpbGQucHJvcHMuY2hpbGRyZW4pLFxuXHRcdFx0XHRcdFx0XHRvbkl0ZW1DbGljazogc2VsZWN0SXRlbSxcblx0XHRcdFx0XHRcdFx0c3RhdHVzLFxuXHRcdFx0XHRcdFx0fSkpfVxuXHRcdFx0XHRcdDwvRHJvcGRvd25MaXN0Q29udGVudD5cblx0XHRcdFx0PC9Ecm9wZG93bkxpc3RNZW51PlxuXHRcdFx0fVxuXHRcdDwvRHJvcGRvd25Db250YWluZXI+XG5cdCk7XG59O1xuXG4vKiogUHJvcHMgKi9cbkRyb3Bkb3duLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZihbXG5cdFx0UHJvcFR5cGVzLm5vZGVcblx0XSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIl19