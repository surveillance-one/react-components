import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

/* eslint-disable object-curly-newline */
import React, { useState, Children, cloneElement, useRef } from "react";
import useOutClick from "../hooks/useOutClick";
import useValueChange from "../hooks/useValueChange";
import { Button } from "../button";
import { DropdownContainer, DropdownListMenu, DropdownListContent } from "./styles";

var Dropdown = function Dropdown(_ref) {
  var valueChange = _ref.valueChange,
      title = _ref.title,
      children = _ref.children,
      status = _ref.status;
  var node = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      listOpen = _useState2[0],
      setListOpen = _useState2[1];

  var _useState3 = useState(title),
      _useState4 = _slicedToArray(_useState3, 2),
      headerTitle = _useState4[0],
      setHeaderTitle = _useState4[1];

  var _useState5 = useState("-1"),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedID = _useState6[0],
      setSelectedID = _useState6[1];

  useValueChange(valueChange, selectedID);
  useOutClick(setListOpen, node);

  var selectItem = function selectItem(title, id) {
    setHeaderTitle(title);
    setListOpen(false);
    setSelectedID(id);
  };

  return React.createElement(DropdownContainer, {
    tabIndex: "1",
    ref: node,
    onClick: function onClick(e) {
      return setListOpen(!listOpen);
    }
  }, React.createElement(Button, {
    iconName: "angle-down"
  }, headerTitle), listOpen && React.createElement(DropdownListMenu, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, React.createElement(DropdownListContent, null, Children.map(children, function (child, i) {
    return cloneElement(child, {
      item: i,
      currentSelection: headerTitle === child.props.children,
      onItemClick: selectItem,
      status: status
    });
  }))));
};
/** Props */


export default Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJvcGRvd24vRHJvcGRvd24uanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJDaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInVzZVJlZiIsInVzZU91dENsaWNrIiwidXNlVmFsdWVDaGFuZ2UiLCJCdXR0b24iLCJEcm9wZG93bkNvbnRhaW5lciIsIkRyb3Bkb3duTGlzdE1lbnUiLCJEcm9wZG93bkxpc3RDb250ZW50IiwiRHJvcGRvd24iLCJ2YWx1ZUNoYW5nZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJzdGF0dXMiLCJub2RlIiwibGlzdE9wZW4iLCJzZXRMaXN0T3BlbiIsImhlYWRlclRpdGxlIiwic2V0SGVhZGVyVGl0bGUiLCJzZWxlY3RlZElEIiwic2V0U2VsZWN0ZWRJRCIsInNlbGVjdEl0ZW0iLCJpZCIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJtYXAiLCJjaGlsZCIsImkiLCJpdGVtIiwiY3VycmVudFNlbGVjdGlvbiIsInByb3BzIiwib25JdGVtQ2xpY2siXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxPQUFPQSxLQUFQLElBQWdCQyxRQUFoQixFQUEwQkMsUUFBMUIsRUFBb0NDLFlBQXBDLEVBQWtEQyxNQUFsRCxRQUFnRSxPQUFoRTtBQUdBLE9BQU9DLFdBQVAsTUFBd0Isc0JBQXhCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix5QkFBM0I7QUFDQSxTQUFTQyxNQUFULFFBQXVCLFdBQXZCO0FBRUEsU0FBU0MsaUJBQVQsRUFBNEJDLGdCQUE1QixFQUE4Q0MsbUJBQTlDLFFBQXlFLFVBQXpFOztBQUVBLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLE9BQThDO0FBQUEsTUFBM0NDLFdBQTJDLFFBQTNDQSxXQUEyQztBQUFBLE1BQTlCQyxLQUE4QixRQUE5QkEsS0FBOEI7QUFBQSxNQUF2QkMsUUFBdUIsUUFBdkJBLFFBQXVCO0FBQUEsTUFBYkMsTUFBYSxRQUFiQSxNQUFhO0FBQzlELE1BQU1DLElBQUksR0FBR1osTUFBTSxFQUFuQjs7QUFEOEQsa0JBRTlCSCxRQUFRLENBQUMsS0FBRCxDQUZzQjtBQUFBO0FBQUEsTUFFdkRnQixRQUZ1RDtBQUFBLE1BRTdDQyxXQUY2Qzs7QUFBQSxtQkFHeEJqQixRQUFRLENBQUNZLEtBQUQsQ0FIZ0I7QUFBQTtBQUFBLE1BR3ZETSxXQUh1RDtBQUFBLE1BRzFDQyxjQUgwQzs7QUFBQSxtQkFJMUJuQixRQUFRLENBQUMsSUFBRCxDQUprQjtBQUFBO0FBQUEsTUFJdkRvQixVQUp1RDtBQUFBLE1BSTNDQyxhQUoyQzs7QUFNOURoQixFQUFBQSxjQUFjLENBQUNNLFdBQUQsRUFBY1MsVUFBZCxDQUFkO0FBQ0FoQixFQUFBQSxXQUFXLENBQUNhLFdBQUQsRUFBY0YsSUFBZCxDQUFYOztBQUVBLE1BQU1PLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNWLEtBQUQsRUFBUVcsRUFBUixFQUFlO0FBQ2pDSixJQUFBQSxjQUFjLENBQUNQLEtBQUQsQ0FBZDtBQUNBSyxJQUFBQSxXQUFXLENBQUMsS0FBRCxDQUFYO0FBQ0FJLElBQUFBLGFBQWEsQ0FBQ0UsRUFBRCxDQUFiO0FBQ0EsR0FKRDs7QUFNQSxTQUNDLG9CQUFDLGlCQUFEO0FBQW1CLElBQUEsUUFBUSxFQUFDLEdBQTVCO0FBQWdDLElBQUEsR0FBRyxFQUFFUixJQUFyQztBQUEyQyxJQUFBLE9BQU8sRUFBRSxpQkFBQVMsQ0FBQztBQUFBLGFBQUlQLFdBQVcsQ0FBQyxDQUFDRCxRQUFGLENBQWY7QUFBQTtBQUFyRCxLQUNDLG9CQUFDLE1BQUQ7QUFBUSxJQUFBLFFBQVEsRUFBQztBQUFqQixLQUErQkUsV0FBL0IsQ0FERCxFQUdFRixRQUFRLElBQ1Isb0JBQUMsZ0JBQUQ7QUFBa0IsSUFBQSxPQUFPLEVBQUUsaUJBQUFRLENBQUM7QUFBQSxhQUFJQSxDQUFDLENBQUNDLGVBQUYsRUFBSjtBQUFBO0FBQTVCLEtBQ0Msb0JBQUMsbUJBQUQsUUFDRXhCLFFBQVEsQ0FBQ3lCLEdBQVQsQ0FBYWIsUUFBYixFQUF1QixVQUFDYyxLQUFELEVBQVFDLENBQVI7QUFBQSxXQUFjMUIsWUFBWSxDQUFDeUIsS0FBRCxFQUFRO0FBQ3pERSxNQUFBQSxJQUFJLEVBQUVELENBRG1EO0FBRXpERSxNQUFBQSxnQkFBZ0IsRUFBR1osV0FBVyxLQUFLUyxLQUFLLENBQUNJLEtBQU4sQ0FBWWxCLFFBRlU7QUFHekRtQixNQUFBQSxXQUFXLEVBQUVWLFVBSDRDO0FBSXpEUixNQUFBQSxNQUFNLEVBQU5BO0FBSnlELEtBQVIsQ0FBMUI7QUFBQSxHQUF2QixDQURGLENBREQsQ0FKRixDQUREO0FBa0JBLENBakNEO0FBbUNBOzs7QUFPQSxlQUFlSixRQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgb2JqZWN0LWN1cmx5LW5ld2xpbmUgKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB1c2VPdXRDbGljayBmcm9tIFwiLi4vaG9va3MvdXNlT3V0Q2xpY2tcIjtcbmltcG9ydCB1c2VWYWx1ZUNoYW5nZSBmcm9tIFwiLi4vaG9va3MvdXNlVmFsdWVDaGFuZ2VcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi9idXR0b25cIjtcblxuaW1wb3J0IHsgRHJvcGRvd25Db250YWluZXIsIERyb3Bkb3duTGlzdE1lbnUsIERyb3Bkb3duTGlzdENvbnRlbnQgfSBmcm9tIFwiLi9zdHlsZXNcIjtcblxuY29uc3QgRHJvcGRvd24gPSAoeyB2YWx1ZUNoYW5nZSwgdGl0bGUsIGNoaWxkcmVuLCBzdGF0dXMgfSkgPT4ge1xuXHRjb25zdCBub2RlID0gdXNlUmVmKCk7XG5cdGNvbnN0IFtsaXN0T3Blbiwgc2V0TGlzdE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXHRjb25zdCBbaGVhZGVyVGl0bGUsIHNldEhlYWRlclRpdGxlXSA9IHVzZVN0YXRlKHRpdGxlKTtcblx0Y29uc3QgW3NlbGVjdGVkSUQsIHNldFNlbGVjdGVkSURdID0gdXNlU3RhdGUoXCItMVwiKTtcblxuXHR1c2VWYWx1ZUNoYW5nZSh2YWx1ZUNoYW5nZSwgc2VsZWN0ZWRJRCk7XG5cdHVzZU91dENsaWNrKHNldExpc3RPcGVuLCBub2RlKTtcblxuXHRjb25zdCBzZWxlY3RJdGVtID0gKHRpdGxlLCBpZCkgPT4ge1xuXHRcdHNldEhlYWRlclRpdGxlKHRpdGxlKTtcblx0XHRzZXRMaXN0T3BlbihmYWxzZSk7XG5cdFx0c2V0U2VsZWN0ZWRJRChpZCk7XG5cdH07XG5cblx0cmV0dXJuIChcblx0XHQ8RHJvcGRvd25Db250YWluZXIgdGFiSW5kZXg9XCIxXCIgcmVmPXtub2RlfSBvbkNsaWNrPXtlID0+IHNldExpc3RPcGVuKCFsaXN0T3Blbil9PlxuXHRcdFx0PEJ1dHRvbiBpY29uTmFtZT1cImFuZ2xlLWRvd25cIj57aGVhZGVyVGl0bGV9PC9CdXR0b24+XG5cdFx0XHR7XG5cdFx0XHRcdGxpc3RPcGVuICYmXG5cdFx0XHRcdDxEcm9wZG93bkxpc3RNZW51IG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG5cdFx0XHRcdFx0PERyb3Bkb3duTGlzdENvbnRlbnQ+XG5cdFx0XHRcdFx0XHR7Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IGNsb25lRWxlbWVudChjaGlsZCwge1xuXHRcdFx0XHRcdFx0XHRpdGVtOiBpLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50U2VsZWN0aW9uOiAoaGVhZGVyVGl0bGUgPT09IGNoaWxkLnByb3BzLmNoaWxkcmVuKSxcblx0XHRcdFx0XHRcdFx0b25JdGVtQ2xpY2s6IHNlbGVjdEl0ZW0sXG5cdFx0XHRcdFx0XHRcdHN0YXR1cyxcblx0XHRcdFx0XHRcdH0pKX1cblx0XHRcdFx0XHQ8L0Ryb3Bkb3duTGlzdENvbnRlbnQ+XG5cdFx0XHRcdDwvRHJvcGRvd25MaXN0TWVudT5cblx0XHRcdH1cblx0XHQ8L0Ryb3Bkb3duQ29udGFpbmVyPlxuXHQpO1xufTtcblxuLyoqIFByb3BzICovXG5Ecm9wZG93bi5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2YoW1xuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiJdfQ==