import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { defaultTheme } from "ui/themes";
import * as sc from "./styles"; // 	className, img, title, meta, footer, mini, children, ...props

var CardComponent = function CardComponent(_ref) {
  var className = _ref.className,
      img = _ref.img,
      title = _ref.title,
      meta = _ref.meta,
      footer = _ref.footer,
      mini = _ref.mini,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "img", "title", "meta", "footer", "mini", "children"]);

  var cardImg = img ? React.createElement(sc.CardImageWrapper, null, React.createElement(sc.CardImage, {
    img: img
  })) : "";
  var cardHeader = title || meta || mini ? React.createElement(sc.CardHeader, {
    title: title,
    meta: meta,
    mini: mini
  }, title && React.createElement(sc.CardTitle, null, title), meta && React.createElement(sc.CardMeta, null, meta), mini && React.createElement(sc.CardMini, {
    mini: mini,
    title: title,
    meta: meta
  })) : "";
  var cardFooter = footer ? React.createElement(sc.CardFooter, null, footer) : "";
  return React.createElement("div", Object.assign({
    className: className
  }, props), cardImg, cardHeader, React.createElement(sc.CardContent, null, children), cardFooter);
};

var Card = styled(CardComponent).withConfig({
  displayName: "Card",
  componentId: "sc-1j3jpvg-0"
})(["", ""], sc.css_cardbase);
/** Default */

Card.defaultProps = {
  img: "",
  title: "",
  meta: "",
  mini: "",
  footer: "",
  width: "20em",
  theme: defaultTheme.base,
  children: []
};
/** Props */

Card.propTypes = {
  img: PropTypes.string,
  title: PropTypes.string,
  meta: PropTypes.string,
  mini: PropTypes.string,
  footer: PropTypes.string,
  width: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
};
export default Card;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY2FyZC9DYXJkLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsInN0eWxlZCIsImRlZmF1bHRUaGVtZSIsInNjIiwiQ2FyZENvbXBvbmVudCIsImNsYXNzTmFtZSIsImltZyIsInRpdGxlIiwibWV0YSIsImZvb3RlciIsIm1pbmkiLCJjaGlsZHJlbiIsInByb3BzIiwiY2FyZEltZyIsImNhcmRIZWFkZXIiLCJjYXJkRm9vdGVyIiwiQ2FyZCIsImNzc19jYXJkYmFzZSIsImRlZmF1bHRQcm9wcyIsIndpZHRoIiwidGhlbWUiLCJiYXNlIiwicHJvcFR5cGVzIiwic3RyaW5nIiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsIm5vZGUiXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsbUJBQW5CO0FBRUEsU0FBU0MsWUFBVCxRQUE2QixXQUE3QjtBQUNBLE9BQU8sS0FBS0MsRUFBWixNQUFvQixVQUFwQixDLENBRUE7O0FBRUEsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixPQUVoQjtBQUFBLE1BRExDLFNBQ0ssUUFETEEsU0FDSztBQUFBLE1BRE1DLEdBQ04sUUFETUEsR0FDTjtBQUFBLE1BRFdDLEtBQ1gsUUFEV0EsS0FDWDtBQUFBLE1BRGtCQyxJQUNsQixRQURrQkEsSUFDbEI7QUFBQSxNQUR3QkMsTUFDeEIsUUFEd0JBLE1BQ3hCO0FBQUEsTUFEZ0NDLElBQ2hDLFFBRGdDQSxJQUNoQztBQUFBLE1BRHNDQyxRQUN0QyxRQURzQ0EsUUFDdEM7QUFBQSxNQURtREMsS0FDbkQ7O0FBQ0wsTUFBTUMsT0FBTyxHQUFJUCxHQUFHLEdBQUcsb0JBQUMsRUFBRCxDQUFJLGdCQUFKLFFBQXFCLG9CQUFDLEVBQUQsQ0FBSSxTQUFKO0FBQWMsSUFBQSxHQUFHLEVBQUVBO0FBQW5CLElBQXJCLENBQUgsR0FBMEUsRUFBOUY7QUFDQSxNQUFNUSxVQUFVLEdBQUtQLEtBQUssSUFBSUMsSUFBVCxJQUFpQkUsSUFBbEIsR0FDakIsb0JBQUMsRUFBRCxDQUFJLFVBQUo7QUFBZSxJQUFBLEtBQUssRUFBRUgsS0FBdEI7QUFBNkIsSUFBQSxJQUFJLEVBQUVDLElBQW5DO0FBQXlDLElBQUEsSUFBSSxFQUFFRTtBQUEvQyxLQUNBSCxLQUFLLElBQUksb0JBQUMsRUFBRCxDQUFJLFNBQUosUUFBZUEsS0FBZixDQURULEVBRUFDLElBQUksSUFBSSxvQkFBQyxFQUFELENBQUksUUFBSixRQUFjQSxJQUFkLENBRlIsRUFHQUUsSUFBSSxJQUFJLG9CQUFDLEVBQUQsQ0FBSSxRQUFKO0FBQWEsSUFBQSxJQUFJLEVBQUVBLElBQW5CO0FBQXlCLElBQUEsS0FBSyxFQUFFSCxLQUFoQztBQUF1QyxJQUFBLElBQUksRUFBRUM7QUFBN0MsSUFIUixDQURpQixHQUtBLEVBTHBCO0FBT0EsTUFBTU8sVUFBVSxHQUFJTixNQUFNLEdBQUcsb0JBQUMsRUFBRCxDQUFJLFVBQUosUUFBZ0JBLE1BQWhCLENBQUgsR0FBNkMsRUFBdkU7QUFDQSxTQUNDO0FBQUssSUFBQSxTQUFTLEVBQUVKO0FBQWhCLEtBQStCTyxLQUEvQixHQUNFQyxPQURGLEVBRUVDLFVBRkYsRUFHQyxvQkFBQyxFQUFELENBQUksV0FBSixRQUFpQkgsUUFBakIsQ0FIRCxFQUlFSSxVQUpGLENBREQ7QUFRQSxDQXBCRDs7QUFzQkEsSUFBTUMsSUFBSSxHQUFHZixNQUFNLENBQUNHLGFBQUQsQ0FBVDtBQUFBO0FBQUE7QUFBQSxhQUNQRCxFQUFFLENBQUNjLFlBREksQ0FBVjtBQUlBOztBQUNBRCxJQUFJLENBQUNFLFlBQUwsR0FBb0I7QUFDbkJaLEVBQUFBLEdBQUcsRUFBRSxFQURjO0FBRW5CQyxFQUFBQSxLQUFLLEVBQUUsRUFGWTtBQUduQkMsRUFBQUEsSUFBSSxFQUFFLEVBSGE7QUFJbkJFLEVBQUFBLElBQUksRUFBRSxFQUphO0FBS25CRCxFQUFBQSxNQUFNLEVBQUUsRUFMVztBQU1uQlUsRUFBQUEsS0FBSyxFQUFFLE1BTlk7QUFPbkJDLEVBQUFBLEtBQUssRUFBRWxCLFlBQVksQ0FBQ21CLElBUEQ7QUFRbkJWLEVBQUFBLFFBQVEsRUFBRTtBQVJTLENBQXBCO0FBV0E7O0FBQ0FLLElBQUksQ0FBQ00sU0FBTCxHQUFpQjtBQUNoQmhCLEVBQUFBLEdBQUcsRUFBRU4sU0FBUyxDQUFDdUIsTUFEQztBQUVoQmhCLEVBQUFBLEtBQUssRUFBRVAsU0FBUyxDQUFDdUIsTUFGRDtBQUdoQmYsRUFBQUEsSUFBSSxFQUFFUixTQUFTLENBQUN1QixNQUhBO0FBSWhCYixFQUFBQSxJQUFJLEVBQUVWLFNBQVMsQ0FBQ3VCLE1BSkE7QUFLaEJkLEVBQUFBLE1BQU0sRUFBRVQsU0FBUyxDQUFDdUIsTUFMRjtBQU1oQkosRUFBQUEsS0FBSyxFQUFFbkIsU0FBUyxDQUFDdUIsTUFORDtBQU9oQlosRUFBQUEsUUFBUSxFQUFFWCxTQUFTLENBQUN3QixTQUFWLENBQW9CLENBQzdCeEIsU0FBUyxDQUFDeUIsT0FBVixDQUFrQnpCLFNBQVMsQ0FBQzBCLElBQTVCLENBRDZCLEVBRTdCMUIsU0FBUyxDQUFDMEIsSUFGbUIsQ0FBcEI7QUFQTSxDQUFqQjtBQWNBLGVBQWVWLElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tIFwidWkvdGhlbWVzXCI7XG5pbXBvcnQgKiBhcyBzYyBmcm9tIFwiLi9zdHlsZXNcIjtcblxuLy8gXHRjbGFzc05hbWUsIGltZywgdGl0bGUsIG1ldGEsIGZvb3RlciwgbWluaSwgY2hpbGRyZW4sIC4uLnByb3BzXG5cbmNvbnN0IENhcmRDb21wb25lbnQgPSAoe1xuXHRjbGFzc05hbWUsIGltZywgdGl0bGUsIG1ldGEsIGZvb3RlciwgbWluaSwgY2hpbGRyZW4sIC4uLnByb3BzXG59KSA9PiB7XG5cdGNvbnN0IGNhcmRJbWcgPSAoaW1nID8gPHNjLkNhcmRJbWFnZVdyYXBwZXI+PHNjLkNhcmRJbWFnZSBpbWc9e2ltZ30vPjwvc2MuQ2FyZEltYWdlV3JhcHBlcj4gOiBcIlwiKTtcblx0Y29uc3QgY2FyZEhlYWRlciA9ICgodGl0bGUgfHwgbWV0YSB8fCBtaW5pKVxuXHRcdD8gPHNjLkNhcmRIZWFkZXIgdGl0bGU9e3RpdGxlfSBtZXRhPXttZXRhfSBtaW5pPXttaW5pfSA+XG5cdFx0XHR7dGl0bGUgJiYgPHNjLkNhcmRUaXRsZT57dGl0bGV9PC9zYy5DYXJkVGl0bGU+fVxuXHRcdFx0e21ldGEgJiYgPHNjLkNhcmRNZXRhPnttZXRhfTwvc2MuQ2FyZE1ldGE+fVxuXHRcdFx0e21pbmkgJiYgPHNjLkNhcmRNaW5pIG1pbmk9e21pbml9IHRpdGxlPXt0aXRsZX0gbWV0YT17bWV0YX0vPn1cblx0XHQ8L3NjLkNhcmRIZWFkZXI+IDogXCJcIlxuXHQpO1xuXHRjb25zdCBjYXJkRm9vdGVyID0gKGZvb3RlciA/IDxzYy5DYXJkRm9vdGVyPntmb290ZXJ9PC9zYy5DYXJkRm9vdGVyPiA6IFwiXCIpO1xuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30+XG5cdFx0XHR7Y2FyZEltZ31cblx0XHRcdHtjYXJkSGVhZGVyfVxuXHRcdFx0PHNjLkNhcmRDb250ZW50PntjaGlsZHJlbn08L3NjLkNhcmRDb250ZW50PlxuXHRcdFx0e2NhcmRGb290ZXJ9XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5jb25zdCBDYXJkID0gc3R5bGVkKENhcmRDb21wb25lbnQpYFxuXHQke3NjLmNzc19jYXJkYmFzZX1cbmA7XG5cbi8qKiBEZWZhdWx0ICovXG5DYXJkLmRlZmF1bHRQcm9wcyA9IHtcblx0aW1nOiBcIlwiLFxuXHR0aXRsZTogXCJcIixcblx0bWV0YTogXCJcIixcblx0bWluaTogXCJcIixcblx0Zm9vdGVyOiBcIlwiLFxuXHR3aWR0aDogXCIyMGVtXCIsXG5cdHRoZW1lOiBkZWZhdWx0VGhlbWUuYmFzZSxcblx0Y2hpbGRyZW46IFtdXG59O1xuXG4vKiogUHJvcHMgKi9cbkNhcmQucHJvcFR5cGVzID0ge1xuXHRpbWc6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRtZXRhOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRtaW5pOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRmb290ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuXHRcdFByb3BUeXBlcy5ub2RlXG5cdF0pLFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xuIl19