import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { defaultTheme } from "../ui/themes";
import { CardImageWrapper, CardImage, CardHeader, CardContent, CardFooter, CardMeta, CardMini, CardTitle, css_cardbase } from "./styles";

var CardComponent = function CardComponent(_ref) {
  var className = _ref.className,
      img = _ref.img,
      title = _ref.title,
      meta = _ref.meta,
      footer = _ref.footer,
      mini = _ref.mini,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "img", "title", "meta", "footer", "mini", "children"]);

  var header = title || meta || mini;
  var headerObj = {
    title: title,
    meta: meta,
    mini: mini
  };
  return React.createElement("div", Object.assign({
    className: className
  }, props), img && React.createElement(CardImageWrapper, null, React.createElement(CardImage, {
    img: img
  })), header && React.createElement(CardHeader, headerObj, title && React.createElement(CardTitle, null, title), meta && React.createElement(CardMeta, null, meta), mini && React.createElement(CardMini, headerObj)), React.createElement(CardContent, null, children), footer && React.createElement(CardFooter, null, footer));
};

var Card = styled(CardComponent).withConfig({
  displayName: "Card",
  componentId: "sc-1j3jpvg-0"
})(["", ""], css_cardbase);
/** Default */

Card.defaultProps = {
  img: "",
  title: "",
  meta: "",
  mini: "",
  footer: "",
  width: "20em",
  theme: defaultTheme.base,
  children: []
};
/** Props */

Card.propTypes = {
  img: PropTypes.string,
  title: PropTypes.string,
  meta: PropTypes.string,
  mini: PropTypes.string,
  footer: PropTypes.string,
  width: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
};
export default Card;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY2FyZC9DYXJkLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsInN0eWxlZCIsImRlZmF1bHRUaGVtZSIsIkNhcmRJbWFnZVdyYXBwZXIiLCJDYXJkSW1hZ2UiLCJDYXJkSGVhZGVyIiwiQ2FyZENvbnRlbnQiLCJDYXJkRm9vdGVyIiwiQ2FyZE1ldGEiLCJDYXJkTWluaSIsIkNhcmRUaXRsZSIsImNzc19jYXJkYmFzZSIsIkNhcmRDb21wb25lbnQiLCJjbGFzc05hbWUiLCJpbWciLCJ0aXRsZSIsIm1ldGEiLCJmb290ZXIiLCJtaW5pIiwiY2hpbGRyZW4iLCJwcm9wcyIsImhlYWRlciIsImhlYWRlck9iaiIsIkNhcmQiLCJkZWZhdWx0UHJvcHMiLCJ3aWR0aCIsInRoZW1lIiwiYmFzZSIsInByb3BUeXBlcyIsInN0cmluZyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLG1CQUFuQjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsY0FBN0I7QUFFQSxTQUNDQyxnQkFERCxFQUVDQyxTQUZELEVBR0NDLFVBSEQsRUFJQ0MsV0FKRCxFQUtDQyxVQUxELEVBTUNDLFFBTkQsRUFPQ0MsUUFQRCxFQVFDQyxTQVJELEVBU0NDLFlBVEQsUUFVTyxVQVZQOztBQVlBLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsT0FFaEI7QUFBQSxNQURMQyxTQUNLLFFBRExBLFNBQ0s7QUFBQSxNQURNQyxHQUNOLFFBRE1BLEdBQ047QUFBQSxNQURXQyxLQUNYLFFBRFdBLEtBQ1g7QUFBQSxNQURrQkMsSUFDbEIsUUFEa0JBLElBQ2xCO0FBQUEsTUFEd0JDLE1BQ3hCLFFBRHdCQSxNQUN4QjtBQUFBLE1BRGdDQyxJQUNoQyxRQURnQ0EsSUFDaEM7QUFBQSxNQURzQ0MsUUFDdEMsUUFEc0NBLFFBQ3RDO0FBQUEsTUFEbURDLEtBQ25EOztBQUNMLE1BQU1DLE1BQU0sR0FBR04sS0FBSyxJQUFJQyxJQUFULElBQWlCRSxJQUFoQztBQUNBLE1BQU1JLFNBQVMsR0FBRztBQUFFUCxJQUFBQSxLQUFLLEVBQUxBLEtBQUY7QUFBU0MsSUFBQUEsSUFBSSxFQUFKQSxJQUFUO0FBQWVFLElBQUFBLElBQUksRUFBSkE7QUFBZixHQUFsQjtBQUNBLFNBQ0M7QUFBSyxJQUFBLFNBQVMsRUFBRUw7QUFBaEIsS0FBK0JPLEtBQS9CLEdBQ0VOLEdBQUcsSUFDSCxvQkFBQyxnQkFBRCxRQUNDLG9CQUFDLFNBQUQ7QUFBVyxJQUFBLEdBQUcsRUFBRUE7QUFBaEIsSUFERCxDQUZGLEVBT0VPLE1BQU0sSUFDTixvQkFBQyxVQUFELEVBQWdCQyxTQUFoQixFQUNFUCxLQUFLLElBQ0wsb0JBQUMsU0FBRCxRQUNFQSxLQURGLENBRkYsRUFNRUMsSUFBSSxJQUNKLG9CQUFDLFFBQUQsUUFDRUEsSUFERixDQVBGLEVBVUVFLElBQUksSUFDSixvQkFBQyxRQUFELEVBQWNJLFNBQWQsQ0FYRixDQVJGLEVBd0JDLG9CQUFDLFdBQUQsUUFDRUgsUUFERixDQXhCRCxFQTRCRUYsTUFBTSxJQUNOLG9CQUFDLFVBQUQsUUFDRUEsTUFERixDQTdCRixDQUREO0FBb0NBLENBekNEOztBQTRDQSxJQUFNTSxJQUFJLEdBQUd0QixNQUFNLENBQUNXLGFBQUQsQ0FBVDtBQUFBO0FBQUE7QUFBQSxhQUNQRCxZQURPLENBQVY7QUFJQTs7QUFDQVksSUFBSSxDQUFDQyxZQUFMLEdBQW9CO0FBQ25CVixFQUFBQSxHQUFHLEVBQUUsRUFEYztBQUVuQkMsRUFBQUEsS0FBSyxFQUFFLEVBRlk7QUFHbkJDLEVBQUFBLElBQUksRUFBRSxFQUhhO0FBSW5CRSxFQUFBQSxJQUFJLEVBQUUsRUFKYTtBQUtuQkQsRUFBQUEsTUFBTSxFQUFFLEVBTFc7QUFNbkJRLEVBQUFBLEtBQUssRUFBRSxNQU5ZO0FBT25CQyxFQUFBQSxLQUFLLEVBQUV4QixZQUFZLENBQUN5QixJQVBEO0FBUW5CUixFQUFBQSxRQUFRLEVBQUU7QUFSUyxDQUFwQjtBQVdBOztBQUNBSSxJQUFJLENBQUNLLFNBQUwsR0FBaUI7QUFDaEJkLEVBQUFBLEdBQUcsRUFBRWQsU0FBUyxDQUFDNkIsTUFEQztBQUVoQmQsRUFBQUEsS0FBSyxFQUFFZixTQUFTLENBQUM2QixNQUZEO0FBR2hCYixFQUFBQSxJQUFJLEVBQUVoQixTQUFTLENBQUM2QixNQUhBO0FBSWhCWCxFQUFBQSxJQUFJLEVBQUVsQixTQUFTLENBQUM2QixNQUpBO0FBS2hCWixFQUFBQSxNQUFNLEVBQUVqQixTQUFTLENBQUM2QixNQUxGO0FBTWhCSixFQUFBQSxLQUFLLEVBQUV6QixTQUFTLENBQUM2QixNQU5EO0FBT2hCVixFQUFBQSxRQUFRLEVBQUVuQixTQUFTLENBQUM4QixTQUFWLENBQW9CLENBQzdCOUIsU0FBUyxDQUFDK0IsT0FBVixDQUFrQi9CLFNBQVMsQ0FBQ2dDLElBQTVCLENBRDZCLEVBRTdCaEMsU0FBUyxDQUFDZ0MsSUFGbUIsQ0FBcEI7QUFQTSxDQUFqQjtBQWNBLGVBQWVULElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgZGVmYXVsdFRoZW1lIH0gZnJvbSBcIi4uL3VpL3RoZW1lc1wiO1xuXG5pbXBvcnQge1xuXHRDYXJkSW1hZ2VXcmFwcGVyLFxuXHRDYXJkSW1hZ2UsXG5cdENhcmRIZWFkZXIsXG5cdENhcmRDb250ZW50LFxuXHRDYXJkRm9vdGVyLFxuXHRDYXJkTWV0YSxcblx0Q2FyZE1pbmksXG5cdENhcmRUaXRsZSxcblx0Y3NzX2NhcmRiYXNlXG59IGZyb20gXCIuL3N0eWxlc1wiO1xuXG5jb25zdCBDYXJkQ29tcG9uZW50ID0gKHtcblx0Y2xhc3NOYW1lLCBpbWcsIHRpdGxlLCBtZXRhLCBmb290ZXIsIG1pbmksIGNoaWxkcmVuLCAuLi5wcm9wc1xufSkgPT4geyBcblx0Y29uc3QgaGVhZGVyID0gdGl0bGUgfHwgbWV0YSB8fCBtaW5pO1xuXHRjb25zdCBoZWFkZXJPYmogPSB7IHRpdGxlLCBtZXRhLCBtaW5pIH07XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfT5cblx0XHRcdHtpbWcgJiZcblx0XHRcdFx0PENhcmRJbWFnZVdyYXBwZXI+XG5cdFx0XHRcdFx0PENhcmRJbWFnZSBpbWc9e2ltZ30vPlxuXHRcdFx0XHQ8L0NhcmRJbWFnZVdyYXBwZXI+XG5cdFx0XHR9XG5cblx0XHRcdHtoZWFkZXIgJiZcblx0XHRcdFx0PENhcmRIZWFkZXIgey4uLmhlYWRlck9ian0+XG5cdFx0XHRcdFx0e3RpdGxlICYmXG5cdFx0XHRcdFx0XHQ8Q2FyZFRpdGxlPlxuXHRcdFx0XHRcdFx0XHR7dGl0bGV9XG5cdFx0XHRcdFx0XHQ8L0NhcmRUaXRsZT5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0e21ldGEgJiZcblx0XHRcdFx0XHRcdDxDYXJkTWV0YT5cblx0XHRcdFx0XHRcdFx0e21ldGF9XG5cdFx0XHRcdFx0XHQ8L0NhcmRNZXRhPn1cblx0XHRcdFx0XHR7bWluaSAmJlxuXHRcdFx0XHRcdFx0PENhcmRNaW5pIHsuLi5oZWFkZXJPYmp9Lz5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdDwvQ2FyZEhlYWRlcj5cblx0XHRcdH1cblxuXHRcdFx0PENhcmRDb250ZW50PlxuXHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8L0NhcmRDb250ZW50PlxuXG5cdFx0XHR7Zm9vdGVyICYmXG5cdFx0XHRcdDxDYXJkRm9vdGVyPlxuXHRcdFx0XHRcdHtmb290ZXJ9XG5cdFx0XHRcdDwvQ2FyZEZvb3Rlcj5cblx0XHRcdH1cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cblxuY29uc3QgQ2FyZCA9IHN0eWxlZChDYXJkQ29tcG9uZW50KWBcblx0JHtjc3NfY2FyZGJhc2V9XG5gO1xuXG4vKiogRGVmYXVsdCAqL1xuQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG5cdGltZzogXCJcIixcblx0dGl0bGU6IFwiXCIsXG5cdG1ldGE6IFwiXCIsXG5cdG1pbmk6IFwiXCIsXG5cdGZvb3RlcjogXCJcIixcblx0d2lkdGg6IFwiMjBlbVwiLFxuXHR0aGVtZTogZGVmYXVsdFRoZW1lLmJhc2UsXG5cdGNoaWxkcmVuOiBbXVxufTtcblxuLyoqIFByb3BzICovXG5DYXJkLnByb3BUeXBlcyA9IHtcblx0aW1nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcblx0bWV0YTogUHJvcFR5cGVzLnN0cmluZyxcblx0bWluaTogUHJvcFR5cGVzLnN0cmluZyxcblx0Zm9vdGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR3aWR0aDogUHJvcFR5cGVzLnN0cmluZyxcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSxcblx0XHRQcm9wVHlwZXMubm9kZVxuXHRdKSxcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZDtcbiJdfQ==